<?php
require(__DIR__. "/../../framework/ver2/common.php");
$obj = array(
	"made" => "2021-11-22",
	"updated" => "2021-11-22"
);
head($obj);
?>
<h2>配列とは</h2>
データの型の授業で一度学びましたね♪<br /><br />覚えていますか??<br /><br />配列とは複数のデータを格納した包括的なデータで、格納されたデータ(要素)に対する名前を付け方から「<strong>インデックス配列</strong>」と「<strong>連想配列</strong>」に分類できます。
<h3>インデックス配列</h3>
データの名前を「0, 1, 2, 3, ...」とします。<br /><br /><span class="u">インデックス番号(データの名前)は「0」から始まることに注意してください。</span>
<br /><br />
<code class="php">
	$ary = array(
		"データ1", "データ2", "データ3"
	);
	$data = $ary[1]; //$dataには「データ2」が格納される
</code>
<h3>連想配列</h3>
データの名前(キー)をユーザが独自に設定できます。
<br /><br />
<code class="php">
	$ary = array(
		"キー1" => "データ1",
		"キー2" => "データ2",
		"キー3" => "データ3"
	);
	$data = $ary["キー2"]; //$dataには「データ2」が格納される
</code>
<h2>配列への追加</h2>
配列に新しい要素を追加するには「配列[] = データ;」とします。<br />「[]」内に何かしらの文字列を入れると、その文字列をキーとした連想配列として要素が追加されます。
<br /><br />
<code class="php">
	$ary = array(
		"データ1", "データ2", "データ3"
	);
	$ary[] = "データ4"; //$aryに「データ4」が追加される
</code>
<code class="php">
	$ary = array(
		"キー1" => "データ1",
		"キー2" => "データ2",
		"キー3" => "データ3"
	);
	$ary["キー4"] = "データ4"; //$aryに「キー4」をキーとした「データ4」が格納される
</code>
<h3>途中への追加</h3>
前述の「配列[] = データ」では追加する要素は配列の最後に追加されます。<br />連想配列では設定した「キー」から取得するため順番は特に問題はありませんが、インデックス配列ではデータの順番が取り出す要素に関わってくるためデータの挿入位置を指定する必要があります。<br /><br />データを途中に追加する際は以下のように記述します。
<br /><br />
<code class="php">
	$ary = array(
		"データ1", "データ3", "データ4"
	);
	//$aryにはデータ2が抜けているためこれを追加したい
	array_splice($ary, 1, 0, "データ2"); //インデックス番号「1」の位置に「データ2」を追加(0)
</code>
第一引数には追加対象の配列を、第二引数には追加する位置を指定します。<br />第三引数の「0」という数値は追加することを意味します。<br /><br />array_splice()関数は本来は配列内のデータを置き換えるための関数である為、置き換える要素の数を「0」に設定することで配列内の要素の置き換えではなく配列に追加することができます。
<h3>配列に追加する関数</h3>
配列に要素を追加する関数には他にも「array_unshift()」や「array_push()」などがありますが、上記2つの方法で代用できるためここでは覚える必要はありません。
<h2>配列の取り出し(ループ)</h2>
配列の取り出しは既に学習しましたね♪<br /><br />「配列[インデックス番号(キー)]」で取り出せます。<br /><br />ですけどこの方法だと、配列内のひとつの要素しか取り出さません。<br /><br />配列の要素を全部取り出すには反復処理を用いる必要があります。<br /><br />反復処理では「for」は学習しましたよね♪<br /><br />「for」を用いればこんな感じで配列内の要素を取り出せます。
<br /><br />
<code class="php">
	$ary = array(
		"データ1", "データ2", "データ3"
	);
	for ($i = 0; $i < count($ary); $i++) { //count(引数)は配列の要素の数を返す関数です
		echo $ary[$i]; //「データ1」「データ2」「データ3」と出力される
	}
</code>
<br />
インデックス配列ならばこの方法でもok!ですが、連想配列ではこの方法ではできません。<br /><br />ということで、「for」以外の反復処理で挑戦しましょう♪
<br /><br />
<code class="php">
	$ary = array(
		"キー1" => "データ1",
		"キー2" => "データ2",
		"キー3" => "データ3"
	);
	foreach ($ary as $key => $value) {
		echo $key. "は". $value. "です。"; //「キー1はデータ1です。」「キー2はデータ2です。」「キー3はデータ3です。」と出力される
	}
</code>
<br />
「foreach (配列 as $key => $value」で反復処理をします。<br /><br />続く「{}」内では「$key」の部分に配列のキーが、「$value」の部分に配列の要素(バリュー)が格納されます。<br /><br />また、インデックス配列についてもforeach文を用いることでより簡単に記述することができます。
<br /><br />
<code class="php">
	$ary = array(
		"データ1", "データ2", "データ3"
	);
	foreach ($ary as $value) {
		echo $value; //「データ1」「データ2」「データ3」と出力される
	}
</code>
<br />
インデックス配列ではキーが存在しない他ため、「=>」は用いません。
<h2>配列化・文字列化</h2>
ここでは文字列を配列に変換する方法と、配列を文字列に変換する方法を紹介します。<br /><br />それぞれ、「explode()」関数と「implode()」関数が該当します。
<h3>explode</h3>
文字列をある文字において分割して配列を作成します。<br /><br />一般に区切り文字として「,(カンマ)」が用いられることが多いです。<br /><br />「explode(区切り文字, 対象の文字列)」として関数を書きます。
<br /><br />
<code class="php">
	$str = "ぴかちゅう,ちこりーた,ひのあらし";
	$ary = explode(",", $str); //$aryには「ぴかちゅう」「ちこりーた」「ひのあらし」が格納される
</code>
<h3>implode</h3>
配列をある文字で結合して文字列とします。<br /><br />「implode(区切り文字, 配列)」とします。
<br /><br />
<code class="php">
	$ary = array(
		"サンダー", "ファイヤー", "フリーザー"
	);
	$str = implode("と", $ary); //$strは「サンダーとファイヤーとフリーザー」が格納されます。
</code>
<?php footer(); ?>