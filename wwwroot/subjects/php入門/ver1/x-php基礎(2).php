<?php
require(__DIR__. "/../../framework/ver2/common.php");
$obj = array(
	"made" => "2021-11-20",
	"updated" => "2021-11-20"
);
head($obj);
?>
<h2>構造化言語の基本</h2>
いわゆるfortranやcobolといった古い言語より後に生まれた言語を指しますが、phpを含むc・c++・python・javaなど現在における主要なプログラミング言語は全て構造化言語に該当します。<br /><br />この構造化言語では主に以下の3つのルールに基づいてプログラムを実行します。
<br />
<ul>
	<li>順次進行</li>
	<li>条件分岐</li>
	<li>反復処理</li>
</ul>
<br />
まずはこれらの性質について理解しましょう♪
<h2>順次進行</h2>
昔の言語は「goto」という命令文を用いて、この処理が終わったらこの処理を実行!!、これが終わったらこっちに飛んで、次はこっちに飛んで、、、<br /><br />といった複雑なコードを書いていました。<br /><br />僕もプログラミング初心者の時はexcelのvbaを用いてgoto文を多用して、友人に馬鹿にされていました。笑<br /><br />goto文を多用する問題点としてコードがグチャグチャになってプログラムの修正が困難になることがあげられます。<br />よくgoto文を乱用してグチャグチャになったコードを揶揄して「スパゲッティコード」と呼びます。<br /><br />構造化言語では原則としてgoto文は使用しません。<br /><br />プログラムは上に書いた命令文から順に実行していきます。
<h2>条件分岐</h2>
「もし天気予報が雨ならば傘を持っていき、それ以外ならば傘を持って行かない」といったように条件を設定してプログラムの処理を分岐させることを言います。<br /><br />この条件分岐では以下の2つを用います。
<br />
<ul>
	<li>if文</li>
	<li>switch文</li>
</ul>
<br />
<h3>if文</h3>
最初にコードを提示します。<br />
<br />
<code class="php">
	if ($weather === "rainy") {
		//傘を持っていく
	} else {
		//傘を持って行かない
	}
</code>
<br />
phpではイコール(等価)を表すのに「=」ではなく、「==」または「===」を用います。<br /><br />前回も説明しましたが、とても大切ですのでもう一度「==」と「===」の違いを説明しますね♪
<br /><br />
<table class="exp">
	<thead>
		<tr>
			<td width="50%">「==」</td>
			<td width="50%">「===」</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="center">等価演算子</td>
			<td class="center">厳密等価演算子</td>
		</tr>
		<tr>
			<td>データの「型」は気にせず、データの実際の値が同じかどうかで判断します。<br /><br />例えば「"1" == 1」という演算はtrue(真)となります。</td>
			<td>データの型を含めて、データが同じかどうかを判断します。<br /><br />例えば「"1" === 1」は文字列型と整数型で異なるためfalse(偽)となります。</td>
		</tr>
	</tbody>
</table>
<br />
kokoは「===」を推奨します。<br />kokoはプログラミングで「==」を使ったことはありません。<br /><br />理由は思わぬバグにつながることと、通常はデータの型も想定して演算を行うべきでプログラムコードを適切に把握・理解していれば「==」を用いる必要がないためです。<br /><br />みなさんも是非「===」を使用してください。<br /><br />ではif文に話を戻します。<br /><br />「if (条件式)」で条件式が「true」ならば続く「{}」内の処理を実行、「false」ならば続く「else」の後の「{}」の処理を実行します。<br /><br />「true」の場合のみ処理を実行して、「false」の際には何も処理をしない場合は「else」は省略可能です。<br /><br />また、プログラムコードを書く際に見やすさ(可読性)の観点から「{」の後の改行を入れて、「{」の始まりの行の先頭のタブ文字 + 1の数のタブ文字を先頭に入れることが多いです。<br /><br />「{}」が入れ子になる際には以下のように記述することが多いので早めに慣れちゃいましょう♪<br /><small>※内容は無視してください。</small>
<code class="php">
	if ($x === "destiny") {
		send_email("iloveyou", function() {
			if (file_put_contents("love-letter.txt", $data, FILE_APPEND)) {
				echo "i'm really happy!!";
			} else {
				cry();
			}
		});
	} else {
		change_destiny();
	}
</code>
<br />
また、条件分岐が複数になる際には「else」のあとに「if」を連ねます。
<br />
<code class="php">
	if ($weather === "rainy") {
		//傘を持っていく
	} else if ($weather === "cloudy") {
		//折りたたみ傘を持っていく
	} else {
		//傘を持って行かない
	}
</code>
<br />
最初は気にしなくてokですが、上のコードだと天気が「strom(嵐)」の際には傘を持って行かなくなってしまうので、入力されるデータはよく注意してくださいね♪<br /><br />kokoは傘はあっても困らないので以下のようなコードを書きます。
<br />
<code class="php">
	if ($weather === "sunny") {
		//傘を持って行かない
	} else if ($weather === "cloudy") {
		//折り畳み傘を持っていく
	} else {
		//傘を持っていく
	}
</code>
これだと「dry(乾燥)」の際にも傘を持って行ってしまいますが、嵐なのに傘を持って行かないよりはましなのでokとしましょう♪<br />本当は入力されるデータを網羅して「else」の際にはエラーとなるように設定した方がセキュリティ上は好ましいです。
<h3>switch文</h3>
ポケモンソードシールドのカセットとswitchを持っていくと色違いのザシアンとザマゼンタが貰えるイベントがあったんですけど、22才の僕を10歳くらいの子たちが囲むように並んできてすごく恥ずかしかったです。<br /><br />どうでもいいですね、、、<br />switch文ではif文をより簡単に記述することができます。<br />特にif文が何個も続く際に用いられます。
<br />
<code class="php">
	switch ($i) {
		case 1:
			echo "1です。";
			break;
		case 2:
			echo "2です。";
			break;
		case 3:
			echo "3です。";
			break;
		default:
			echo "1,2,3のいずれでもない。"
	}
</code>
「switch」の後の条件式($i)がcaseの後のデータと等しければそれ以降の処理が実行されます。<br /><br />phpのswitch文は一度条件に合致するとそのあとの全てのcaseを実行してしまうため、最後に「break;」を付けて処理を中断させて下さい。<br /><br />いずれにも一致しなかった場合は「default」の後の文が実行されます。<br /><br />またswitchでの式の比較は「===」ではなく「==」であり、型が異なっていても値が等しければ「true」となることに注意してください。
<h3>反復処理</h3>
条件を満たす限りある処理(ループ)をし続けます。<br />反復処理には主に以下の2つの方法があります。
<br />
<ul>
	<li>for文</li>
	<li>while文</li>
</ul>
<h4>for文</h4>
通常は回数を指定して処理を実行する際に用いられます。<br />例えば100回挑戦(challenge)する際には以下のようなコードを書きます。
<br />
<code class="php">
	for ($i = 0; $i < 100; $i++) {
		challenge();
	}
</code>
<br />
for文に続く括弧の中は以下の構成になっています。
<br /><br />
<table id="for" class="x" border="1">
	<tbody>
		<tr>
			<td>$i = 0;</td>
			<td>$i < 100;</td>
			<td>$i++</td>
		</tr>
		<tr>
			<td>初期値として$iに0を設定します。</td>
			<td>「{}」内の処理を$iが100未満の限り実行し続けます。</td>
			<td>「{}」内の処理が完了する度、$iの値を「1」増加させます。<br />「$i = $i + 1」の短縮系です。</td>
		</tr>
	</tbody>
</table>
<h4>while文</h4>
処理をひたすらし続けて、ある条件が発生したらループから抜け出させる(break)際に用いられます。
<br />
<code class="php">
	while (true) {
		$rec = $stmt->fetch(PDO::FETCH_ASSOC);
		if ($rec === false) {
			break;
		}
		$name_list[] = $rec["name"];
	}
</code>
<br />whileの後の条件式が「true」であれば「{}」内の処理をするんですけど、一般的な用い方は条件式に「true」を入れて無限ループさせて、ある条件を満たしたら強制的に「break;」を用いてループ外へ脱出させます。<br /><br />わかりにくいですよね、、、<br /><br />最初のうちはあまり使わないので理解できなくてok!です。<br />後ほどデータベースからデータを取得する際に使用します。<br /><br /><br />では、総復習として問題を出しますね♪<br /><br />以下のコードを実行すると何が出力されるでしょうか???
<br />
<code class="php">
	$date = <?php echo date("d"); ?>;
	$mod2 = $date % 2;
	$mod3 = $date % 3;
	if ($mod2 === 0 &amp;&amp; $mod3 === 0) {
		$x = "2の倍数かつ3の倍数";
	} else if ($mod2 === 0) {
		$x = "3の倍数ではないが2の倍数";
	} else if ($mod3 === 0) {
		$x = "2の倍数ではないが3の倍数";
	} else {
		$x = "2の倍数でも3の倍数でもない";
	}
	for ($i = 0; $i < 3; $i++) {
		echo "今日は". $x;
	}
</code>
<?php
$date = date("d");
$mod2 = $date % 2;
$mod3 = $date % 3;
if ($mod2 === 0 && $mod3 === 0) {
	$x = "2の倍数かつ3の倍数";
} else if ($mod2 === 0) {
	$x = "3の倍数ではないが2の倍数";
} else if ($mod3 === 0) {
	$x = "2の倍数ではないが3の倍数";
} else {
	$x = "2の倍数でも3の倍数でもない";
}
?>
<br /><br />わかりましたか???<br /><br />答えは「<?php echo "今日は". $x ?>」って3回表示されます。<br /><br />分からなかった方はもう一度よく復習してくださいね♪
<?php footer(); ?>