<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-01-15",
	"updated" => "2022-01-15"
);
head($obj);
?>
<!--
<(\/?)(.+?)>
&lt;$1$2&gt;
-->
<h2>関数</h2>
関数はある一定の処理をまとめたもので、主に引数(関数に渡すデータ)から戻り値を算出することを目的とします。
<img src="../pics/関数.png" alt="関数" />
主な目的としては以下の3つがあげられます。
<ul>
	<li>コードの簡素化</li>
	<li>保守性の向上</li>
	<li>変数の汚染の防止</li>
</ul>
<h3>コードの簡素化</h3>
同じ処理を何度も書くと、当然コード量が増えてどこでなにをしているのか分からなくなりますよね、、、<br />共通する処理を関数化して、ひとつにまとめることでコードを簡素化を実現することができます。
<h3>保守性の向上</h3>
同じ処理をコピペして貼り付けたと仮定しましょう。<br />そのコードを修正する必要が生じました。<br />どうでしょうか???<br /><br />コピペした部分を全て探して変更するのは大変ですし、見落とす可能性も出てきますよね、、、<br />関数でひとまとめにしておけば、そこだけを変更すればok!ですので、プログラムの修正が容易になります。
<h3>変数の汚染の防止</h3>
変数って長すぎるとその変数が何を表しているかは分かりやすいですけど、書くのが面倒ですよね、、、<br />できるだけ短くしたらどうでしょうか???<br />確かに書くのが簡単になりますが、その分変数が重複して上書きしてしまう危険性が高まりますよね、、、<br />これを克服する方法が関数化です。<br />後ほど詳しく説明しますが、関数内で宣言した変数は当該関数内でのみ有効ですので変数が重複してしまう問題を回避することだできます。
<h2>関数の定義</h2>
関数は以下のように定義します。
<code class="javascript">
	function 関数名(引数) {
		//関数内の処理
		return 戻り値
	}
</code>
引数が複数個存在する場合には「,(カンマ)」で区切って表します。<br />では引数として受け取った数字を半径とした円の面積を返す関数を作成してみましょう♪
<code class="javascript">
	function pai_r2(r) {
		return r ** 2 * 3.14;
	}
</code>
<h2>関数の実行</h2>
関数を実行するには以下のコードを実行します。
<code class="javascript">
	関数名(引数);
</code>
では先ほどの円の面積を求める関数を使用して円の面積を取得しましょう♪
<code class="javascript">
	function pai_r2(r) {
		return r ** 2 * 3.14;
	}
	console.log(pai_r2(5));
	console.log(pai_r2(10));
	console.log(pai_r2(25));
</code>
<img class="no-max" src="../pics/関数の実行.gif" alt="関数の実行" />
<h2>アロー関数</h2>
突然ですが以下のコードを実行すると何が出力されるでしょうか???
<code class="javascript">
	function pokemon() {
		console.log("ピカチュウ");
	}
	function pokemon() {
		console.log("ライチュウ");
	}
	pokemon();
</code>
<img class="no-max" src="../pics/関数の上書き.gif" alt="関数の上書き" />
これは同一の名前を持つ関数を設定したことで関数の上書きが起こったためです。<br />変数であれば上書きをすることは多いのですが、関数を上書きすることはまずありません。<br />ということで関数を上書きできないように設定しましょう♪<br />以下のように記述します。
<code class="javascript">
	const 関数名 = 引数 => {
		//関数の処理
		return 戻り値;
	}
</code>
引数が複数個存在する場合には括弧で囲む必要があります。<br />また、関数内の処理がreturn文だけの場合は「{...}」とreturn文を省略することができます。<br />先ほどの円の面積を取得する関数をアロー関数を用いて書くと以下のようになります。
<code class="javascript">
	const pai_r2 = r => r ** 2 * 3.14
</code>
<img class="no-max" src="../pics/const関数.gif" alt="リテラル関数" />
これで関数を上書きするとエラーを吐き出してくれます。
<code class="javascript">
	const pokemon = () => {
		console.log("ピカチュウ");
	}
	const pokemon = () => {
		console.log("ライチュウ");
	}
	pokemon();
</code>
<img class="no-max" src="../pics/関数上書き-不可.gif" alt="関数上書き" />
<h2>関数のスコープ</h2>
関数内で宣言した変数にはスコープ(有効範囲)が存在し、当該関数のスコープの外では参照できません。
<img src="../pics/スコープ.png" alt="関数のスコープ" />
<h2>再帰関数</h2>
再帰関数とは自分自身を呼び出す関数です。<br />再帰関数の例を紹介します。
<code class="javascript">
	function fx() {
		fx(); //自分自身を呼び出す
	}
</code>
上のコードはエラーとなります。<br />関数が自分自身を呼び出して、呼び出された関数がまた自分自身を呼び出して、さらにその関数が自分自身を呼び出して、、、<br />無限ループに陥ります。<br />再帰関数は条件分岐を用いて無限ループをしないように設定する必要があります。<br />数学でいえば「場合分け」を用いるということですね♪<br /><br />では再帰関数の代表格ともいえる、階乗を求める関数を作ってみましょう♪
<img src="../pics/階乗-場合分け.png" alt="再帰関数" />
<code class="javascript">
	function factrial(n) {
		if (n !== 1) {
			return n * (factrial - 1);
		} else {
			return 1;
		}
	}
</code>
<img class="no-max" src="../pics/再帰関数.gif" alt="再帰関数" />
結構複雑です。<br />最初のうちは紙に書いて実行順序を辿っていくことをオススメします。<br />これがすぐに理解できるようであれば、プログラミングのセンス抜群です!!!<br />頭がこんがらがってても心配無用です。
<?php footer(); ?>