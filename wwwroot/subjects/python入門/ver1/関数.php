<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2021-12-28",
	"updated" => "2021-12-28"
);
head($obj);
?>
<h2>関数</h2>
関数とは複数の処理をひとまとめにして名前を付けたものです。<br />関数は呼び出される際に<strong>引数</strong>として処理するデータを受取り、それを関数内で処理した結果のデータを<strong>戻り値</strong>として呼び出し元に返します。
<img src="../pics/関数.png" alt="関数の説明画像" />
<h2>関数の定義</h2>
関数は以下のように定義します。
<code class="python">
	def 関数名 (引数) :
		#関数内の処理
		return 戻り値
</code>
<h3>関数名</h3>
関数名はその関数を実行するのに用いられます。<br />変数同様に半角英数字と「_(アンダースコア)」が使用可能で、関数名の先頭に数字は使用できません。
<h3>引数</h3>
関数に処理をお願いするデータです。<br />引数が複数存在する場合には「,(カンマ)」で区切ります。<br />設定した引数は関数内では変数として扱われます。<br />引数をとらない場合は引数を「()」のように空欄にすればok!です。
<h3>関数内の処理</h3>
関数内での処理を記述します。<br />関数内で関数外で宣言された変数を使用することは原則できません。
<p class="r">global修飾子については後述</p>
関数内での処理は関数内だけで行われ、関数内で実行した変数への代入は原則として呼び出し元には影響を与えません。
<h3>戻り値</h3>
関数内で処理をしたデータを関数の呼び出し元に返すにはreturn文を使用します。<br />「return 戻り値」と書きます。<br />関数内でreturn文に出会ったら途中であっても関数から抜け出して元の処理に戻ります。
<div class="separator"></div>
例えば引数として受け取った数字を2倍にして返す関数は以下のように定義します。
<code class="python">
	def double(n) :
		answer = n * 2
		return answer
</code>
簡単に以下のように記述することもできます。
<code class="python">
	def double(n) :
		return n * 2
</code>
<h2>関数の実行</h2>
関数の実行は以下のように記述します。
<code class="python">
	関数名(引数)
</code>
関数が実行されると戻り値を取得できます。<br />そのため通常は「引数 = 関数名(引数)」と戻り値を変数に代入します。<br />また、プログラムは順次実行により上から順に実行されるため、関数の実行は関数の定義よりも後に書く必要があります。<br />引数をとらない場合は「関数()」と書きます。<br />では先ほどの引数として受け取った数字を2倍にして返すdouble関数を実行しましょう♪
<code class="python">
	def double(n) :
		return n * 2
	x = int(input("数字を入力してください。\n"))
	print(double(x))
</code>
<img class="max-350w" src="../pics/def.gif" alt="関数の実行の説明画像" />
<h2>スコープ</h2>
早速ですけど以下のコードを実行すると何が出力されるでしょうか???
<code class="python">
	p = "ピカチュウ"
	def emolga() :
		print(p)
	emolga()
	print(p)
</code>
<img class="max-350w" src="../pics/スコープ.png" alt="スコープの説明画像" />
予想できますね♪<br />では次はどうでしょうか???
<code class="python">
	p = "ピカチュウ"
	def emolga() :
		p = "エモンガ"
		print(p)
	emolga()
	print(p)
</code>
<img class="max-350w" src="../pics/スコープ2.png" alt="スコープの説明画像" />
こうなる理由は関数外と関数内で変数の保存先が異なるからです。<br />emolga関数内で「p = "エモンガ"」で「p」に「エモンガ」を代入していますが、これはemolga関数内でのみ有効です。<br />そのため、emolga関数の外での「p」の値は「ピカチュウ」のままです。<br /><br />このように関数内で宣言した変数には有効範囲があり、これを<strong>スコープ</strong>と呼びます。<br />スコープには以下の2つがあります。
<ul>
	<li>グローバル変数</li>
	<li>ローカル変数</li>
</ul>
<h3>グローバル変数</h3>
関数の外で宣言された変数であり、プログラムのどこからでも参照可能です。
<p>代入するには以下で説明するglobal宣言が必要です。</p>
関数内からグローバル変数を使用する際には変数のグローバル宣言をする必要があります。<br />グローバル宣言は以下のように行います。
<code class="python">
	def 関数名() :
		global グローバル変数名
		#関数内での処理
		#.....
</code>
このように記述すれば関数内からグローバル変数を参照するだけでなく、代入することもできるようになります。
<code class="python">
	p = "ピカチュウ"
	def emolga() :
		global p #「p」のグローバル宣言
		p = "エモンガ"
		print(p)
	emolga()
	print(p)
</code>
<img class="max-350w" src="../pics/global.png" alt="グローバル宣言の説明画像" />
大規模なプログラムでグローバル変数・グローバル宣言を多用するとコードがぐちゃぐちゃになるため、グローバル変数・グローバル宣言の使用は必要最低限に抑えるべきです。<br />特にグローバル宣言を多用すると、変数をどこでどんな処理をしているのかが分かりにくくなるため、要注意です。
<h3>ローカル変数</h3>
関数内で宣言し、その関数内でのみアクセス可能です。<br />関数として一定の処理をまとめることである処理に必要な変数だけをまとめることができるので、極力ローカル変数を使用するべきです。
<h2>デフォルト引数</h2>
関数を実行する際に渡す引数の数は、関数を定義する際に設定する引数の数である必要があります。<br />そのため、関数実行時に渡す引数の数が不足している以下のコードはエラーとなります。
<code class="python">
	def fx(arg1, arg2, arg3) : #受け取る引数は「3」つ
		print(arg1)
		print(arg2)
	fx(1, 2) #与える引数は「2」つ
</code>
<img class="max-350w" src="../pics/引数の不足.png" alt="デフォルト引数の説明画像" />
同様に関数実行時に渡す引数が、関数内で受け取る引数の数よりも多い場合もエラーとなります。
<code class="python">
	def fx(arg1, arg2) : #受け取る引数は「2」つ
		print(arg1)
		print(arg2)
	fx(1, 2, 3) #与える引数は「3」つ
</code>
<img class="max-350w" src="../pics/引数の不足.png" alt="デフォルト引数の説明画像" />
<div class="separator"></div>
これだと不便です。<br />引数として渡すデータを省略したいときもありますよね、、、<br />例えば、半径と円周率を引数として渡し、関数内で「半径<sup>2</sup> &times; 円周率」をして面積を返す関数を想定してください。<br />ほとんどのケースで円周率は「3.14」であればok!ですよね、、、<br />これを省略できるようにしましょう。<br />引数を省略したときに代入される自動で設定した値が代入される引数をデフォルト引数と呼びます。<br />「引数 = デフォルト値」とします。
<code class="python">
	def r2_pai(r, pai = 3.14) :
		return r ** 2 * pai
	print(r2_pai(3))
</code>
<img class="max-350w" src="../pics/デフォルト引数.png" alt="デフォルト引数の説明画像" />
第二引数を省略しているため、「pai」には「3.14」が代入されています。
<code class="python">
	def r2_pai(r, pai = 3.14) :
	return r ** 2 * pai
	print(r2_pai(3, 3.14159265))
</code>
<img class="max-350w" src="../pics/デフォルト引数2.png" alt="デフォルト引数の説明画像" />
引数を渡した場合は、その値が使用されます。
<?php footer(); ?>