<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2021-12-28",
	"updated" => "2021-12-28"
);
head($obj);
?>
<h2>IDLE基礎</h2>
先ほどは「1+1」や「1+10」などを実行してその結果を出力させるというOne By Oneなプログラムを実行しましたね♪<br />ですけど実際には命令文をひとつのファイルにまとめてそれを一括で実行することが多いです。<br />ということでまずはプログラムの命令文を書くためのファイルを作成しましょう♪<br /><br />左上の「File &gt; New File」またはコントロールキーと「N」を同時に押します。<br />「untitlled」と名前のついたファイルが表示されますね♪<br />ここにコードを書いていきます。<br /><br />ファイルを保存するには左上の「File &gt; Save」またはコントロールキーと「S」を同時に押して上書き保存、「File &gt; Save As...」またはコントロールキーとシフトキーと「S」を同時に押して名前を付けて保存が可能です。<br />ファイル名はなんでもok!ですが拡張子は原則(慣例)として「.py」とします。
<h2>プログラムの実行</h2>
では先ほど作成したプログラムを実行しましょう♪<br />上の「Run &gt; Run Module」をクリックしてプログラムを実行します。
<img src="../pics/python-run.png" alt="IDLEの実行の説明の画像" />
<h2>コーディングの際の注意点</h2>
実際にコードを書く際に注意するべき点を予めあげます。
<ul>
	<li>全角禁止</li>
	<li>インデント禁止</li>
	<li>小文字・大文字の区別</li>
</ul>
<h3>全角禁止</h3>
コードは全角文字を使用できません。<br />文字列として全角文字を扱う場合には「'(シングルクォーテーション)」ないしは「"(ダブルクォーテーション)」で囲む必要があります。<br />特に全角のスペースに関しては見分けがつきにくので要注意です。<br />windowsの設定で予め全角のスペース・記号は使用できないようにしておくことをオススメします。
<p class="r">設定の仕方は<a href="http://koko-campus.org/blog/index?date=20211128">こちら</a>。</p>
<h3>インデント禁止</h3>
インデントとは行の先頭のスペースとタブ文字を言います。<br />プログラムコード内のスペース・タブ文字は行頭にあるものを除いて全て無視されるので見栄えのために使ってもok!ですが、行頭にインデントは置かないようにしてください。
<h3>小文字・大文字の区別</h3>
プログラム内で使用されるコードの大文字と小文字は区別されます。<br />例えば「print」とすべきところを「PRINT」にしたらエラーとなります。<br />ほとんどが小文字ですので特に理由がない限りは小文字を使っておけばok!です。
<h2>データ型</h2>
ではちょっとした問題です。<br />「1 + 1」の結果はどうなるでしょうか???<br /><br />答えは「2」です。<br />当然ですね。<br />では、次の問題です。<br />「"1" + "1"」の答えは何でしょうか???<br /><br />答えは「"11"」です。<br /><br />う～ん、、、<br />どうしてでしょうか、、、<br /><br />これにはデータの型というものの理解が必要です。<br />データの型とはどんな種類のデータかを表すもので、具体的には以下のデータ型が存在します。
<ul>
	<li>int</li>
	<li>float</li>
	<li>str</li>
	<li>bool</li>
	<li>list</li>
	<li>dictionary</li>
	<li>datetime</li>
	<li>tuple</li>
</ul>
たくさんありますね、、、<br />大丈夫です。<br />そこまで難しくありません。<br />ひとつずつ説明していきます。
<h3>int</h3>
「<strong>整数</strong>」を表します。<br />これに関しては「'(シングルクォーテーション)」ないしは「"(ダブルクォーテーション)」で囲まずにそのまま「10」「25」「999」と表現します。
<h3>float</h3>
「<strong>小数</strong>」を表します。<br />これも「'(シングルクォーテーション)」ないしは「"(ダブルクォーテーション)」で囲まずにそのまま「10.25」「25.25」「999.99」と表現します。
<h3>str</h3>
「<strong>文字列</strong>」を表します。<br />これは文字列を「'(シングルクォーテーション)」ないしは「"(ダブルクォーテーション)」で囲って表現します。<br />「"ピカチュウ"」「"ゼルネアス"」「"12345!"」といった感じです。<br /><br />シングルクォーテーションとダブルクォーテーションはどちらを使ってもok!ですが、文字列にシングルクォーテーションを含む際にはダブルクォーテーションで文字列全体を囲み、文字列にダブルクォーテーションを含む場合は文字列全体をシングルクォーテーションで囲む必要があります。<br />ここでは原則としてダブルクォーテーションを使用します。<br /><br />「+」を用いることで文字列を連結することができます。
<h3>bool</h3>
「<strong>真偽値</strong>」を表します。<br />真偽値とは「yes」or「no」のことで、python内では「True」と「False」で表します。<br />これは「'(シングルクォーテーション)」ないしは「"(ダブルクォーテーション)」で囲みません。
<h3>list</h3>
「<strong>配列</strong>」を表します。<br />配列とは複数のデータを格納するためのデータ型です。<br />配列の範囲は「[](スクエアブラケット)」で表現し、配列の要素は「,(カンマ)」で区切って表現します。<br />配列型が格納するデータの型に制限はなく、str型・float型・int型・真偽値型...を含むことができるほか、配列型も含めることができます。<br />「["ピカチュウ", "チコリータ", "エモンガ", "トゲデマル"]」といった感じです。<br />配列内の要素は原則として全て異なるデータ型を用いてください。<br />配列内の要素を指定する際にはインデント番号を使用します。<br />インデックス番号とは「0」から始まる数字のことです。
<p class="r">「1」からではなく、「0」から始まることに注意してください。</p>
<h3>dictionary</h3>
「<strong>連想配列</strong>」を表します。<br />配列の進化バージョン???です。<br />配列では配列内の要素を指定するために「0」から始まるインデックス番号を使用しましたが、連想配列では独自にインデックスキー(インデックス番号の連想配列バージョン)を設定することができます。<br />辞書型のデータは「{}(ブレース)」を使用し、要素は「キー(インデックスキー)」と「バリュー(値)」を「:(コロン)」で区切って表現します。<br />複数個存在する場合には「,(カンマ)」で区切って表現します。<br />「{"青森": "りんご", "山形": "さくらんぼ", "埼玉": "せんべい"}」と表記します。
<p class="r">pythonでは正確には連想配列型とは呼ばず、辞書型と呼びます。</p>
<h3>datetime</h3>
「<strong>日付型</strong>」を表します。<br />「datetime.datetime(2021, 12, 31, 23, 59, 59)」といった感じに定義しますが、ここでは覚える必要はありません。<br />こんなデータ型があるんだな程度に覚えてください。
<h3>tuple</h3>
「<strong>タプル型</strong>」を表します。<br />pyhton独特のデータ型です。<br />僕はあまり使ったことがありません。<br />説明は省略します。
<div class="separator"></div>
多くの参考書ではこのデータの型を最初に説明していないことが多いのですが、僕はこれがプログラミングの中でも基礎となる部分だと思うのでここで説明しました。
<h2>print</h2>
データをコンソール画面に出力するための関数です。<br />print(出力したいデータ)で実行します。<br />ためしに以下のコードを実行してみましょう♪
<code class="python">
	print("Hello World!")
	print(1 + 1)
	print(True)
	print(["りんご", "いちご", "さくらんぼ"])
	print({"青森": "りんご", "とちぎ": "いちご", "やまがた": "さくらんぼ"})
</code>
以下のように表示されたら成功です。
<img src="../pics/IDLE-test.png" alt="プログラム実行結果の画像" />
この「print」は続く括弧「()」内のデータをコンソール画面に出力します。
<p class="r">python2系で説明しているサイトでは「print」の後に括弧を付けていない場合もありますが、現在主流のpython3系では「print」は文ではなく関数となったので必ず括弧を付けてください。</p>
<h3>改行</h3>
また、文字列内で改行をしたい場合はコード内で改行するのではなく、「\n」と書きます。
<code class="python">
	print("文字列内で改行しては
	ダメ!!")
</code>
<img class="max-350w" src="../pics/文字列内改行エラー.png" alt="文字列内での改行の説明画像" />
<code class="python">
	print("こうやって\n改行するよ")
</code>
<img class="max-350w" src="../pics/文字列内改行.png" alt="文字列内での改行の説明画像" />
<h2>型変換</h2>
文字列としての「"25"」を整数型に変換したい場合は「int("25")」と、数字としての「25」を文字列に変換したい場合は「str(25)」と書きます。<br />pythonではc言語やjavaと違って変数の型宣言が必要ないので、変数の型を指定したい場合はこのように明示的に行う必要があります。
<h2>input</h2>
ユーザがコンソール画面に入力した文字列を取得します。<br />「変数 = input("ユーザに表示する文字")」で実行します。
<p class="r">変数については後ほど説明します。</p>
先ほど学んだprint関数も用いてユーザが入力した文字を出力するプログラムを作ってみましょう♪
<code class="python">
	data = input("データを入力してね♪")
	print(data)
</code>
<img class="max-350w" src="../pics/input.gif" alt="input関数の説明画像" />
<?php footer(); ?>