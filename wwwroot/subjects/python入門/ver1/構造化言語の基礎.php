<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2021-12-28",
	"updated" => "2021-12-28"
);
head($obj);
?>
<h2>構造化言語</h2>
構造化言語とは主にc言語以降に開発された以下の3つを基本性質としてもつプログラミング言語を指します。
<ul>
	<li>順次実行</li>
	<li>条件分岐</li>
	<li>反復処理</li>
</ul>
<h2>順次実行</h2>
特に意識したことはないと思いますが、プログラムは上から書かれたコードから順に実行されます。<br />1行目のコードの実行が完了したら2行目を実行して、2行目のコードの実行が完了したら3行目を実行して、、、<br />言い換えれば、2行目のコードが実行される際には1行目のコードの実行は完了していて、3行目のコードが実行される際には2行目のコードの実行は完了していると言えます。<br /><br />この順次実行が保証されない言語ではgoto文を用いてコードの実行順序を指定していました。<br />goto文を用いるとコードがスパゲッティのように複雑に絡み合って見づらくなることから、スパゲッティコードなんて呼ばれたりします。<br />僕がプログラミング初心者の頃はvbaでgoto文を乱用して友人からバカにされていました笑
<h2>条件分岐</h2>
明日雨がふれば傘を持っていき、降らなければ傘を持って行かないというようにある条件を満たすか否かで実行するコードを変更(制御)します。<br />これを実現するには「if」文を使用します。<br />条件式とelseの後には「:(カンマ)」を付け、その後の命令文はインデントを付けます。
<code class="python">
	if 条件式 : #「:」を忘れずに!
		#条件式が「真」の場合に実行する処理(インデントを忘れずに!!)
	else : #「:」を忘れずに!
		#条件式が「偽」の場合に実行する処理(インデントを忘れずに!!)
</code>
<h3>条件式</h3>
条件式を構成する演算子には以下のものがあります。
<table>
	<tbody>
		<tr>
			<th>&lt;</th>
			<td>「小なり」<br />右の数字が左の数字よりも(同じを含まない)大きければ「真」、それ以外は「偽」となります。</td>
		</tr>
		<tr>
			<th>&lt;=</th>
			<td>「小なりイコール」<br />右の数字が左の数字以上(同じを含む)であれば「真」、それ以外は「偽」となります。</td>
		</tr>
		<tr>
			<th>&gt;</th>
			<td>「大なり」<br />右の数字が左の数字よりも(同じを含まない)小さければ「真」、それ以外は「偽」となります。</td>
		</tr>
		<tr>
			<th>&gt;=</th>
			<td>「大なりイコール」<br />右の数字が左の数字以下(同じを含む)であれば「真」、それ以外は「偽」となります。</td>
		</tr>
		<tr>
			<th>==</th>
			<td>「イコール」<br />左と右のデータが<span class="u">型も含めて</span>同じであれば「真」、それ以外は「偽」となります。<br />「1 == "1"」は数字型と文字型で型が異なるため「偽」となることに注意してください。</td>
		</tr>
		<tr>
			<th>!=</th>
			<td>「ノットイコール」<br />「==」の結果を反転したものです。<br />「1 != "1"」は「真」となります。</td>
		</tr>
	</tbody>
</table>
<div class="separator"></div>
ではユーザが入力したデータが奇数か偶数かを判定するプログラムを作ってみましょう♪<br />コンソール画面から入力される文字は全て文字列とされるため、「int(input())」と整数型に変換する必要があります。
<code class="python">
	n = int(input("数字を入力してください。\n"))
	if n % 2 == 0 : #「n」を「2」で割った余りが「0」ならば、、、
		print("偶数です")
	else : #余りが「0」でなければ、、、
		print("奇数です")
</code>
<img class="max-350w" src="../pics/if.gif" alt="条件分岐の説明画像" />
<p class="r">このgif画像は繰り返し実行できるように若干加工してあります。</p>
<div class="separator"></div>
次は入力された数字が20以上30未満であるかどうかを判定するプログラムを作ってみましょう♪
<code class="python">
	n = int(input("数字を入力してください。\n"))
	if (20 &lt;= n) and (n &lt; 30) :
		print("20以上30未満")
</code>
今回はelseを書かず、条件を満たさなかった場合は特に何も処理はしません。
<img class="max-350w" src="../pics/if2.gif" alt="条件分岐の説明画像" />
また、pythonでは以上(より大きい)と以下(より小さい)を同時に判定する際に「min &lt; x &lt; max」とつなげて書くことができます。<br />他の言語では「(min &lt; x) and (x &lt; max)」と2つに分けて書く必要があります。
<code class="python">
	n = int(input("数字を入力してください。\n"))
	if 20 &lt;= n &lt; 30 :
		print("20以上30未満")
</code>
<h3>条件連鎖</h3>
条件判定を連鎖させることもできます。<br />elseの後にifをもう一度書いてもok!ですが、pythonでは「else if」を合体させた「elif」が使用可能です。
<code class="python">
	n = int(input("数字を入力してください。\n"))
	if n % 3 == 0 :
		print("3n")
	elif n % 3 == 1 :
		print("3n+1")
	elif n % 3 == 2 :
		print("3n+2")
</code>
<img class="max-350w" src="../pics/elif.gif" alt="条件分岐の説明画像" />
<h2>反復処理</h2>
一定回数処理を繰り返します。<br />反復処理を実現するコードには以下の2つがあります。
<ul>
	<li>for</li>
	<li>while</li>
</ul>
<h3>for</h3>
「for 要素 in 配列(リスト)」と書きます。<br />配列内の要素の数だけ反復処理を実行して、forの後に要素の変数には配列内のデータがひとつずつ代入されます。
<code class="python">
	for k in ["ピカチュウ", "エモンガ", "トゲデマル"] :
		print(k)
</code>
<img class="max-350w" src="../pics/for.png" alt="反復処理の説明画像" />
これを利用して10回反復処理を実行する場合には10個の配列の要素を作成します。
<code class="python">
	for k in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] :
		print("10回繰り返し♪")
</code>
<img class="max-350w" src="../pics/for2.png" alt="反復処理の説明画像" />
もし仮に100回ループ処理をさせる場合は100個の配列の要素を作成します。
<code class="python">
	for k in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25...] :
		print("10回繰り返し♪")
</code>
無理ですね、、、<br />ある一定回数処理を実行したい場合はrange関数を使用しましょう♪<br />range(始まり, 終わり)と書けば始まりから終わりまでの整数の配列を返してくれます。
<p>終わり未満の整数を返すので終わりの数に「+ 1」をするのを忘れないで下さい。</p>
<code class="python">
	for k in range(1, 10 + 1) :
		print(str(k) + "回目のループ") #「k」は整数型であるため、文字列と連結するために文字列型に変換
</code>
<img class="max-350w" src="../pics/range.png" alt="反復処理の説明画像" />
もっと簡単にrange(繰り返したい回数)と書くこともできます。<br />この場合は「0」から始まります。<br />プログラミングの世界では「1」からではなく、「0」から数えることが多いので早めに慣れちゃいましょう♪
<p class="r">この書き方はrange(0, 繰り返したい回数)の省略形です。</p>
<h3>while</h3>
条件式が「真」である場合に実行し続け、「偽」となった場合、ないしは、「break」に出会った場合に反復処理から抜け出します。<br />下のコードでは最初に「n」に「0」を代入して繰り返し処理で「n」の値を表示し、繰り返し処理の最後に「n」の値に「1」を加算します。<br />この処理を「n」が「30」に到達するまで繰り返します。
<code class="python">
	n = 0;
	while n <= 30 :
		print(n)
		n = n + 1
</code>
<img class="max-350w" src="../pics/while.png" alt="反復処理の説明画像" />
<div class="separator"></div>
whileとifを併用して、反復処理中にある条件を満たしたら処理をやめる場合には「break」を用います。
<code class="python">
	n = int(input("数字を入力してください。\n"))
	while 1 == 1 :
		if n % 17 == 0 :
			print(n)
			break
		n = n + 1
</code>
「while 1 == 1」???<br />当然これは「真」であるため反復処理は永遠に繰り返されます。<br />これを無限ループと言います。<br />ですけど安心してください。<br />このコードを実行しても無限ループには陥りません。<br />そのループ処理内である条件(必ず満たす条件)を満たした場合は「break」で無限ループを強制終了させています。<br />ちなみに上のコードは何をするコードだと思いますか???<br /><br />答えは、入力した文字以上の最小の17の倍数を表示します。
<p class="r">無限ループ内での条件分岐に失敗して完全に無限ループしてプログラムが制御不能になった場合は「Ctrl」 + 「C」で強制終了させてください。</p>
実践では「While 1 == 1」ではなく「while True」を使用してください。<br />別に「while "ピカチュウ" == "ピカチュウ"」でもok!ですけど、、、
<h2>ループの入れ子</h2>
ループの中にループを入れることも可能です。<br />ネストや入れ子と言ったりします。<br />ここでは掛け算九九の結果を出力するプログラムを書いてみましょう♪
<code class="python">
	for i in range(1, 9 + 1): #外側のループ
		for j in range(1, 9 + 1): #内側のループ
			print(str(i * j) + " ", end="")
		print("") #ここで改行
</code>
<p class="r">print関数で自動で改行しないように「end=""」を加えています。</p>
<img class="max-350w" src="../pics/二重ループ.png" alt="二重ループの説明画像" />
<?php footer(); ?>