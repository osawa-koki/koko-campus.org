<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-02-11",
	"updated" => "2022-02-11"
);
head($obj);
?>
<h2>マルチスレッド処理</h2>
現在において最も一般的なプログラミング言語の区分である、構造化プログラミング言語では順次実行を基本としています。<br />順次実行とはプログラムを上から順に実行していくことで、1行目のコードの実行が完了したら2行目へ進み、2行目のコードの実行が完了したら3行目へと進みます。<br />言い換えれば、2行目のコードが実行される際には1行目のコードの実行が完全に終了していて、3行目のコードが実行される際には2行目までのコードの実行は完全に終了していると言えます。<br /><br />しかしながら、これでは問題があります。<br />例えば2行目のコードの実行に時間がかかる場合には3行目以降の処理が一度ストップしてしまいます。<br /><br />ある処理とある処理を並行して進めることでこの問題を克服します。<br />これをマルチスレッド処理と呼びます。
<img src="../pics/マルチスレッド処理.png" alt="マルチスレッド処理" />
javascriptなどで採用されているシングルスレッドでの非同期処理ではないことに注意してください。<br />非同期処理ではシングルスレッドでの処理をループし、その中で時間がかかる処理をスキップして、条件を満たしたらこれを実行します。
<h2>シングルスレッド処理の問題</h2>
シングルスレッドで逐次実行プログラムの問題点として時間がかかる処理でそれ以降の全ての処理がストップされることがあげられます。<br />例えば、3行目に5秒待つ処理があると、4行目以降の処理は全て5秒以降に実行されることになります。
<code class="go">
	import (
		"fmt"
		"time"
	)

	func single1() {
		for i := 1; i <= 3; i++ {
			fmt.Println("シングルスレッド1  ", i)
			time.Sleep(1 * time.Second) //1秒待機
		}
	}
	func single2() {
		for i := 1; i <= 3; i++ {
			fmt.Println("シングルスレッド2  ", i)
			time.Sleep(1 * time.Second) //1秒待機
		}
	}

	func main() {
		single1()
		single2()
		fmt.Println("シングルスレッド  終了!!!")
	}
</code>
timeパッケージのSleep関数を使用して1秒待機させています。
<img src="../pics/プログラム-シングルスレッド処理.gif" alt="シングルスレッド処理" />
待機している時間、無駄になってしまいます。<br />この問題を克服するためにマルチスレッド処理を使用します。
<h2>goルーチン</h2>
goでマルチスレッド処理をするにはgoルーチンを使用します。<br />以下のように書きます。
<code class="go">
	go 関数()
</code>
では先ほどのコードをマルチスレッド処理で行ってみましょう♪
<code class="go">
	import (
		"fmt"
		"time"
	)

	func multi1() {
		for i := 1; i <= 3; i++ {
			fmt.Println("マルチスレッド1  ", i)
			time.Sleep(1 * time.Second) //1秒待機
		}
	}
	func multi2() {
		for i := 1; i <= 3; i++ {
			fmt.Println("マルチスレッド2  ", i)
			time.Sleep(1 * time.Second) //1秒待機
		}
	}

	func main() {
		go multi1()
		multi2()
		fmt.Println("マルチスレッド2  終了!!!")
	}
</code>
<img src="../pics/プログラム-マルチスレッド処理.gif" alt="マルチスレッド処理" />
最初にgoルーチンで呼び出されたmulti1関数がサブスレッドで実行され、その間にmulti2関数がメインスレッドで実行されます。<br />また、環境によって若干の誤差が生じるため順番に表示されないことがあります。
<h2>サブスレッドの生存期間</h2>
サブスレッドはメインスレッドが実行されている期間だけ生存します。<br />言い換えれば、goルーチンで呼び出された関数の実行が完了する前にメインスレッドでの処理が完了すれば、サブスレッド処理も消滅します。<br />以下のコードはgoルーチンで呼び出す関数のループ回数を100回に変更したプログラムです。<br />これを実行してみましょう♪
<code class="go">
	import (
		"fmt"
		"time"
	)
	
	func multi1() {
		for i := 1; i <= 100; i++ {
			fmt.Println("マルチスレッド1  ", i)
			time.Sleep(1 * time.Second) //1秒待機
		}
	}
	func multi2() {
		for i := 1; i <= 3; i++ {
			fmt.Println("マルチスレッド2  ", i)
			time.Sleep(1 * time.Second) //1秒待機
		}
	}
	
	func main() {
		go multi1()
		multi2()
		fmt.Println("マルチスレッド2  終了!!!")
	}
</code>
<img src="../pics/プログラム-マルチスレッド処理2.gif" alt="マルチスレッド処理" />
実行結果は先ほどと変わりません。
<p class="r">multi1のループが1回多く実行されていますが、これは誤差です。</p>
メインスレッド処理は3回で終了しているため、サブスレッドの回数を3回超に増やしてもメインスレッドが終了する3回までしか実行されないからです。
<?php footer(); ?>