<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-05-10",
	"updated" => "2022-05-10"
);
head($obj);
?>
<h2>セキュリティ</h2>
データベースとはその名の通り、データの保管庫です。<br />データベースのセキュリティが不十分であって、情報が流出したらとんでもないことになります。<br /><br />数あるハッキング・サイバー攻撃のなかで、最も脅威な攻撃はデータベースに対する攻撃です。<br />絶対に情報を奪われる、ないしは改竄されるわけにはいきません。<br /><br />ということで、今回はデータベースのセキュリティについて説明します。<br /><br />業務には直接関係なく、かつ効果が分かりにくいため、意識が向きにくいと思います。<br />しかしながら、決して侮ること勿れ!!<br /><br />全力で学んでください。
<h2>アクセス制御(理論)</h2>
まず、第一に行うべきことです。<br />アクセス制御の不備からセキュリティ事故が起こることってホントに多いんです、、、<br /><br />OWASP TOP10のうち、第二位と第五位がデータベースの認証・権限の不備によるものです。<br /><br />参考までに、、、<br />情報処理安全確保支援士試験で説明した内容ですが、ここでも説明します。<br /><br />OWASPとは(Open Web Application Security Project)の略で、ソフトウェアのセキュリティを向上させることを専門とした非営利団体のことを指します。<br />OWASP top 10とはそのOWASPが提供するWebアプリケーション・セキュリティに関する最も重大な10のリスクについてのレポートです。
<div class="scroll-600w">
	<table>
		<caption>OWASP top 10</caption>
		<thead>
			<tr>
				<th>順位</th>
				<th>名称</th>
				<th>内容</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<th>1位</th>
				<th>インジェクション</th>
				<td>入力文字列に不正なコマンド文(命令文)を入力して、それを受け取ったプログラムに悪意のある動作をさせます。<br><br>例えばIDを有力する欄に「みんなのデータを見せて♪」と入力して、プログラムに「みんなのデータを見せる動作」をさせます。</td>
			</tr>
			<tr class="bg-pink">
				<th>2位</th>
				<th>認証の不備</th>
				<td>正しく本人確認ができずに、不正なアクセスを許してしまうことです。</td>
			</tr>
			<tr>
				<th>3位</th>
				<th>機密情報の露出</th>
				<td>重要な情報に対する適切な防衛策をとらずに、第三者にアクセスを許してしまうことです。</td>
			</tr>
			<tr>
				<th>4位</th>
				<th>XML外部実体参照<br>(XXE)</th>
				<td>文書型宣言に使用するDTD(Document Type Definition)というスキーマ言語で悪意のある外部ファイルを参照させて、サーバに不正な動作をさせることです。</td>
			</tr>
			<tr class="bg-pink">
				<th>5位</th>
				<th>アクセス制御<br>の不備</th>
				<td>ユーザに与えられた権限を超えたアクセス権限を付与している状態を指します。</td>
			</tr>
			<tr>
				<th>6位</th>
				<th>不適切な<br>セキュリティ設定</th>
				<td>セキュリティに関する設定に不備がある状態を指します。</td>
			</tr>
			<tr>
				<th>7位</th>
				<th>クロスサイト・<br>スクリプティング<br>(XSS)</th>
				<td>正当なwebサイトに罠を仕掛けて悪意のあるwebページへと遷移させて、情報を盗む攻撃手法です。</td>
			</tr>
			<tr>
				<th>8位</th>
				<th>安全でない<br>デシリアライゼーション</th>
				<td>データの型変換(デシリアライゼーション)に際して、悪意のある命令を実行させます。</td>
			</tr>
			<tr>
				<th>9位</th>
				<th>既知の脆弱性を持つ<br>コンポーネントの使用</th>
				<td>セキュリティ上の問題があると知られているIT製品を、最新版にアップデートすることなく使い続けている状態です。</td>
			</tr>
			<tr>
				<th>10位</th>
				<th>不十分なロギング<br>とモニタリング</th>
				<td>コンピュータの動作に関して十分な監視を行っていないがために、攻撃を早期に探知できずに被害が拡大してしまうことです。</td>
			</tr>
		</tbody>
	</table>
</div>
<p>OWASPのwebサイトは<a href="https://owasp.org/www-project-top-ten/">こちら</a>。</p>
<p>情報処理安全確保支援士試験の学習ページ(OWASP TOP 10)は<a href="../../情報処理安全確保支援士試験/ver2022/脅威と脆弱性?to=href_owasp">こちら</a>。</p>
<div class="separator"></div>
アクセス制御は大きく以下の2つで構成されます。
<ol>
	<li>認証</li>
	<li>適切な権限の付与</li>
</ol>
<h3>認証</h3>
あなたは本当にその人ですか???<br />ってのを確認する作業です。<br /><br />代表な認証としてパスワードがありますね♪<br />しかしながら、パスワードだと流出した時に詰みます。<br />生体認証・指紋認証を採用するなんてもってのほかですしね、、、<br /><br />結論、絶対はないです。<br />一応、70桁以上のパスワードを設定することが一般的で、かつそのパスワードも厳重に管理して対応することがほとんどです。<br />しかしながら、やっぱりパスワードの流出は怖いですよね、、、<br /><br />ということで、SQL Serverではwindows OSの認証システムをそのまま使用することができます。<br />まあ、この方法はかなり安全ですが、実際はこの方法だと都合が悪いことがあるんですよね、、、<br /><br />ということで、SQL Serverによる認証(パスワード)も使用可能です。<br /><br />この方法を採用する場合にはパスワードはできるだけ長く(70桁以上)で、かつランダムな文字列に設定してください。
<h3>適切な権限の付与</h3>
内部不正防止、被害の最小限化に必要なことです。<br /><br />権限とはあるユーザが何をしてよいかを示すものです。<br /><br />例えば、あまり信頼できない新人に対してなんでもできる権限を付与してはダメです。<br />データベースを誤操作する危険性もありますし、不正に使用される危険性もあります。<br /><br />また、万が一アカウントが乗っ取られた場合にも権限を必要最小限に設定しておけば被害を最小限に抑えられます。<br /><br />大切なのは以下の2つです。
<ul>
	<li>権限最小限の原則</li>
	<li>不要なアカウントの削除</li>
</ul>
既に説明した通り、権限は必要最小限で設定するべきです。<br />また、退職者等の不要なアカウントを残しておくことでそこから攻撃される危険性が高まります。<br />アカウントは不要になった時点で速やかに削除しましょう♪
<h2>アクセス制御(実践)</h2>
では、実際にアクセス制御の仕組みを整えてみましょう♪<br />ユーザを新たに作成して適切な権限を付与します。<br />最後にユーザの削除方法を紹介します。
<h3>ユーザの作成</h3>
左に表示されているオブジェクトエクスプローラーの「Security &gt; Logins」を右クリックして、「New Login」を選択します。
<img src="../pics/new-login.gif" alt="ユーザの作成" />
作成するユーザに関する設定を行う画面が表示されます。
<img src="../pics/ユーザの作成.gif" alt="ユーザの作成" />
<div class="scroll-600w">
	<table>
		<tbody>
			<tr>
				<th>Enforce password policy</th>
				<td>
					ユーザ名を含めない、8文字以上、小文字・大文字・数字・記号のうち三種類以上を用いる、などの制約を課します。
					<p>引用元サイト(公式)は<a href="https://docs.microsoft.com/ja-jp/sql/relational-databases/security/password-policy?view=sql-server-ver15">こちら</a>。</p>
				</td>
			</tr>
			<tr>
				<th>Enforce password expiration</th>
				<td>パスワードの有効期限を設定します。</td>
			</tr>
			<tr>
				<th>User must change password at next login</th>
				<td>ユーザの初回ログイン時にパスワード変更を強制します。</td>
			</tr>
		</tbody>
	</table>
</div>
また、今回はwindows認証ではなく、SQL Server認証を採用します。
<div class="separator"></div>
ここでユーザを作成しただけではログインができるようになりません。<br />作成したユーザでログインするためには以下の2つの作業を行う必要があります。
<ol>
	<li>SQL Serverが許可する認証方式の変更</li>
	<li>SQL Serverの再起動</li>
</ol>
最初にSQL Serverが許可する認証方式を変更しましょう♪<br />左側に表示されているオブジェクトエクスプローラーのサーバ名を右クリックして「Properties」を選択します。<br />プロパティウィンドウが表示されます。<br />「Security」を選択し、認証方式を「SQL Server and Windows Authentication mode」に変更します。<br /><br />次にSQL Serverを再起動します。<br />再起動の方法は既に説明しましたね♪<br />SQL Server構成マネージャーから、ないしはwindwosのサービス管理プログラムから再起動できます。<br /><br />これで完了です。<br />試しに、先ほど作成したユーザでログインしてみてください。
<h3>権限の設定</h3>














<?php footer(); ?>