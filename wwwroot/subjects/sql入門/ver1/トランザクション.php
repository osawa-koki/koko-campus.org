<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-02-03",
	"updated" => "2022-02-03"
);
head($obj);
?>
<h2>トランザクション</h2>
トランザクションとは不可分な一連の処理を言います。<br /><br />例えば、クレジットカードでの取引は主に以下の処理からなります。
<ol>
	<li>使用可能残高の確認</li>
	<li>使用可否の結果の送信</li>
	<li>決済の記録</li>
	<li>使用可能残高の減額</li>
</ol>
正確にどのような処理を行っているかは分かりませんが、おそらくこんな感じです。<br /><br />大切なのは、この4つの処理でワンセットであって、途中まで実行されることは許されないということです。<br /><br />例えば、使用可能残高を確認して決済ok!という結果を送信した直後に停電が発生して、決済の記録と使用可能残高の減額が行われなかったらダメですよね、、、<br />使用した金額を利用者に請求できません。<br /><br />このように一連の不可分な処理をトランザクションと呼びます。
<h2>ACID特性</h2>
トランザクションが備えるべき4つの性質の頭文字です。
<div class="scroll-600w">
	<table>
		<caption>ACID特性</caption>
		<tbody>
			<tr>
				<th><strong>A</strong>tomicity</th>
				<td>原子性<br />トランザクションは「全て実行される」か「まったく実行されない」のどちらかです。<br />少しだけ実行されるのはありえません。</td>
			</tr>
			<tr>
				<th><strong>C</strong>onsintency</th>
				<td>一貫性<br />トランザクションはデータベースの内容に矛盾を生じさせません。</td>
			</tr>
			<tr>
				<th><strong>I</strong>solation</th>
				<td>独立性<br />トランザクションは他のトランザクションの影響を受けません。</td>
			</tr>
			<tr>
				<th><strong>D</strong>urability</th>
				<td>永続性<br />一度正常に終了したトランザクションの実行結果は失われません。</td>
			</tr>
		</tbody>
	</table>
</div>
トランザクション用のsqlで特に注意するべきなのは原子性と独立性の2つです。<br />一貫性と永続性に関しては特に意識しなくても実現できますので、、、
<h2>コミットメント制御</h2>
トランザクションのACID特性のうちの原子性を保証するための制御方法です。<br />トランザクションが正しく完了した場合は<strong>コミット</strong>を行って更新内容を確定させ、正しく完了しなかった場合は<strong>ロールバック</strong>を行って更新内容を全て破棄します。<br />以下のように書きます。
<code class="sql">
	BEGIN;
		/*トランザクション処理1*/
		/*トランザクション処理2*/
		/*トランザクション処理3*/
	COMMIT;
</code>
<p class="r">Oracle DBではBEGINは不要です。</p>
トランザクション1が完了してトランザクション2が処理されている最中に停電が発生した場合はトランザクション1も破棄されます。(ロールバック)<br />トランザクション3が完了した時点で処理が完了します。(コミット)
<h2>同時実行の副作用</h2>
複数のsql文を同時に処理することで生じる問題を言います。<br /><br />例えば、同じクレジットカードを用いてひとつは実際のカードを使用した店舗での決済(決済1)、もうひとつはスマホでのオンライン決済(決済2)をした場面を想定して下さい。<br />利用限度額は10,000円で両方とも8,000円の決済をしました。<br />以下のようなケースを想定してください。
<img src="../pics/ロック.png" alt="ロック" />
両方の決済時の残高確認時においては利用ok!でしたが、その後に店舗決済で決済が完了しているため、その後のスマホ決済では残高が不足してしまいます。
<div class="separator"></div>
同時に複数のsql文を受け付けることで生じる副作用として以下の3つが想定されます。
<ul>
	<li>ダーティーリード</li>
	<li>ノンリピータブルリード</li>
	<li>ファントムリード</li>
</ul>
<h3>ダーティーリード</h3>
コミットされていない未確定の変更を、他のトランザクションで読み込みが可能である問題を言います。
<h3>ノンリピータブルリード</h3>
SELECT文でデータを取得した後に他のsql文が送信したUPDATE文を実行することで、SELECTで取得した内容と異なってしまう問題です。
<h3>ファントムリード</h3>
SELECT文でデータを取得した後に他のsql文が送信したINSERTE文を実行することで、SELECTで取得した内容と異なってしまう問題です。<br />ノンリピータブルリードのINSERT版です。
<h2>ロック(排他制御)</h2>
同時実行の副作用を克服する技術です。<br />トランザクションのACID特性のうちの独立性を保証するために使用されます。<br /><br />具体的にはある処理がデータを使用している期間、当該データを他の処理で利用できなくします。<br />また、どのレベルでロックするかによって以下の3つに分類されます。
<ul>
	<li>データベース全体のロック</li>
	<li>テーブル単位のロック</li>
	<li>行単位ののロック</li>
</ul>
通常は実行効率の低下や後述するデッドロックを避けるために行単位のロックを使用します。<br />また、ロックの強度から以下の2つに分類されます。
<table>
	<caption>占有ロックと共有ロック</caption>
	<thead>
		<tr>
			<th width="50%">占有ロック</th>
			<th width="50%">共有ロック</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>他からのアクセスの一切を禁止します。</td>
			<td>他からのアクセスのうち、読み込みのみ許可します。</td>
		</tr>
	</tbody>
</table>
<h3>共有ロック</h3>
デフォルトでSELECT文を使用すると共有ロックがかかります。
<h3>占有ロック</h3>
SELECT文の後にFOR UPDATEを付けます。
<code class="sql">
	BEGIN;
	SELECT ...
		FOR UPDATE;
	/*トランザクション処理...*/
	/*トランザクション処理...*/
	/*トランザクション処理...*/
	COMMIT;
</code>
占有ロック中は他の処理は当該データのロックが解除されるまで、待機します。<br />待機するのではなく、エラーとして処理したい場合はNOWAITを付けます。
<code class="sql">
	BEGIN;
	SELECT ...
		FOR UPDATE NOWAIT;
	/*トランザクション処理...*/
	/*トランザクション処理...*/
	/*トランザクション処理...*/
	COMMIT;
</code>
<h3>テーブルのロック</h3>
テーブルをロックするには以下のように書きます。
<code class="sql">
	BEGIN;
	LOCK table テーブル名 IN モード MODE;
	/*トランザクション処理...*/
	/*トランザクション処理...*/
	/*トランザクション処理...*/
	COMMIT;
</code>
モードは占有ロックの場合は「EXCLUSIVE」、共有ロックの場合は「SHARE」とします。
<h2>トランザクションの分離レベル</h2>
同時実行の副作用として以下の3つがありましたね♪
<ul>
	<li>ダーティーリード</li>
	<li>ノンリピータブルリード</li>
	<li>ファントムリード</li>
</ul>
ロックに関して、どのレベルでトランザクションを分離するかによって以下の4つのレベルに分けられます。
<div class="scroll-600w">
	<table>
		<caption>トランザクション分離レベル</caption>
		<thead>
			<tr>
				<th>分離レベル</th>
				<th>ダーティーリード</th>
				<th>ノンリピータブルリード</th>
				<th>ファントムリード</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<th>READ UNCOMMITTED</th>
				<td class="トランザクション分離レベル-危険">危険</td>
				<td class="トランザクション分離レベル-危険">危険</td>
				<td class="トランザクション分離レベル-危険">危険</td>
			</tr>
			<tr>
				<th>READ COMMITTED</th>
				<td class="トランザクション分離レベル-安全">安全</td>
				<td class="トランザクション分離レベル-危険">危険</td>
				<td class="トランザクション分離レベル-危険">危険</td>
			</tr>
			<tr>
				<th>REPEATABLE READ</th>
				<td class="トランザクション分離レベル-安全">安全</td>
				<td class="トランザクション分離レベル-安全">安全</td>
				<td class="トランザクション分離レベル-危険">危険</td>
			</tr>
			<tr>
				<th>SERIALIZABLE</th>
				<td class="トランザクション分離レベル-安全">安全</td>
				<td class="トランザクション分離レベル-安全">安全</td>
				<td class="トランザクション分離レベル-安全">安全</td>
			</tr>
		</tbody>
	</table>
</div>
上に行くほど実行効率は高い反面、危険であると言えます。<br />下に行くほど実行効率は低い反面、安全であると言えます。
<div class="separator"></div>
トランザクション分離レベルは以下のように設定します。
<code class="sql">
	SET TRANSACTION ISOLATION LEVEL 分離レベル;
</code>
<h2>デッドロック</h2>
2つの処理がお互いのロックの解除を待っている状態を言います。<br />処理Aが資源Xをロック、処理Bが資源Yをロックして、両者が互いのロック解除を待っているため、永久に待ち続けるエラーです。<br /><br />イメージとしては、A君が「B君が行くなら行く!」と言い、B君は「A君が行くなら行く」と言っている状態ですね、、、<br />このままだとダメです。<br /><br />通常はDBMSがデッドロックを回避するための機能を備えていますが、プログラマもこれを防ぐように設計する必要があります。<br />デッドロックを回避するには資源のロック順序を統一する必要があります。<br />処理Aが資源Xをロック、処理Bが資源Yをロックしてデッドロックが生じる場面では、「資源X &rarr; 資源Y」と「資源Y &rarr; 資源X」という2つの資源のロック順序が存在するためデッドロックが発生します。<br />このどちらかにロック順序を統一すればデッドロックを回避できます。
<?php footer(); ?>