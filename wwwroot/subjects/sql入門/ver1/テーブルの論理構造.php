<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-02-03",
	"updated" => "2022-02-03"
);
head($obj);
?>
<h2>テーブルの論理構造</h2>
今まではsql文に慣れるために自由にテーブルを作成してきましたが、ここではより綺麗で実用的なテーブルの作成方法について学びましょう♪<br />大切なのはスッキリ管理するということです。<br />もっと正確に説明するとムダ(重複)を排除して、データにまとまりを設けることです。
<h2>候補キーと主キー</h2>
sql文を実行してみて、行を特定する必要性を実感できましたか???<br />データを操作する際に列に関してはカラム名を使用してsql文の中で直接指定しますが、行に関してはそれができません。<br />理由はテーブルを作成する際に列を特定する一意(ユニーク)なカラム名を設定しましたが、行に関しては何も設定しないからです。<br />当然ですけど、、、<br /><br />しかしながら、行に関する操作をする際には行を特定する識別子が必要となります。<br />テーブルにおいて、行を一意(ユニーク)に特定するための列を<strong>候補キー</strong>と呼びます。<br />候補キーの中でも意味的に最もふさわしいものを特に<strong>主キー</strong>と呼びます。<br />具体的にはidや商品番号・学籍番号などが該当します。<br /><br />学籍番号が「1740170621」である人は一人だけです。<br />絶対に行を特定できます。<br />名前は主キーにはなりません。<br />「山田太郎」さんは2人以上いる可能性がありますからね、、、
<h2>主キー制約</h2>
どんな列を主キーとして設定するべきなのかはなんとなく理解できましたか???<br />主キーが備えるべき性質は2つあります。
<ul>
	<li>一意性制約</li>
	<li>非NULL制約</li>
</ul>
簡単に言えば「<strong>ひとつだけ</strong>」「<strong>ある</strong>」ことを要求します。
<h3>一意性制約</h3>
主キーはかならず、一意(オンリーワン)であり、主キーが重複する行は存在しない必要があります。<br />当然ですけど、同じ学籍番号の学生が存在したらどっちの学生か特定できなくなってしまいますからね、、、<br /><br />「<strong>ひとつだけ</strong>」あることを要求します。
<h3>非NULL制約</h3>
主キーは絶対にNULLになっていはいけません。<br />主キーからその行を特定しようとしているのに、そもそも主キーがNULLならその行は絶対に特定できなくなってしまいますからね、、、<br />ブラックホール状態です。<br />ブラックホール状態の意味は分かりませんケド、、、<br /><br />ひとつだけ「<strong>ある</strong>」ことを要求します。
<h2>テーブルの作成</h2>
既に学習済みですが、ここではより深く学習します。<br />まずはテーブルの作成方法を復習しましょう♪
<code class="sql">
	CREATE table テーブル名 (
		カラム名 データ型,
		カラム名 データ型,
		カラム名 データ型,
		PRIMARY KEY (カラム名)
	);
</code>
オプションやプライマリーキーを設定する場合には以下のように書きましたね♪
<code class="sql">
	CREATE table テーブル名 (
		カラム名 データ型 オプション,
		カラム名 データ型 オプション,
		カラム名 データ型 オプション,
		PRIMARY KEY (カラム名)
	);
</code>
ここでは、オプションとプライマリーキーについて説明します。
<h2>プライマリーキー</h2>
最初に説明した主キーに対して設定します。<br />主キーが備えるべき以下の2つの性質を持つ必要があります。
<ul>
	<li>一意性制約</li>
	<li>非NULL制約</li>
</ul>
設定方法はCREATE tableに続く括弧の最後に以下のように記述します。
<code class="sql">
	CREATE table テーブル名 (
		カラム名 データ型 オプション,
		カラム名 データ型 オプション,
		カラム名 データ型 オプション,
		PRIMARY KEY (カラム名)
	);
</code>
以下のように設定することも可能です。
<code class="sql">
	CREATE table テーブル名 (
		カラム名 データ型 PRIMARY KEY オプション,
		カラム名 データ型 オプション,
		カラム名 データ型 オプション
	);
</code>
<h2>オプション</h2>
間違ったデータを挿入しようとした際に、これを防ぐための仕組みです。<br />オプションでは以下の5つを学びます。
<ul>
	<li>デフォルト値</li>
	<li>UNIQUE制約</li>
	<li>NOT NULL制約</li>
	<li>CHECK制約</li>
	<li>AUTO_INCREMENT</li>
</ul>
<h3>デフォルト値</h3>
通常はINSERT文でデータが挿入されなかったカラムはNULLとして処理されます。<br />これを他の値に設定することができます。<br />以下のように書きます。
<code class="sql">
	CREATE table テーブル名 (
		カラム名 データ型 DEFAULT デフォルト値,
		カラム名 データ型 DEFAULT デフォルト値,
		カラム名 データ型 DEFAULT デフォルト値
	);
</code>
<h2>NOT NULL制約</h2>
非NULL制約のことです。<br />プライマリーキーに設定したカラムは自動でこれが設定されるため、これを改めて設定する必要はありません。<br />プライマリーキー以外にNULLを許さないカラムに対して設定します。<br />以下のように記述します。
<code class="sql">
	CREATE table テーブル名 (
		カラム名 データ型 DEFAULT デフォルト値 NOT NULL,
		カラム名 データ型 DEFAULT デフォルト値 NOT NULL,
		カラム名 データ型 DEFAULT デフォルト値 NOT NULL
	);
</code>
<h3>UNIQUE制約</h3>
一意性制約のことです。<br />プライマリーキーに設定したカラムは自動でこれが設定されるため、これを改めて設定する必要はありません。<br />プライマリーキー以外に重複を許さないカラムに対して設定します。<br />以下のように記述します。
<code class="sql">
	CREATE table テーブル名 (
		カラム名 データ型 DEFAULT デフォルト値 NOT NULL UNIQUE,
		カラム名 データ型 DEFAULT デフォルト値 NOT NULL UNIQUE,
		カラム名 データ型 DEFAULT デフォルト値 NOT NULL UNIQUE
	);
</code>
因みに、上のsql文からNUT NULL制約を排除してNULLが挿入される場合、NULLは重複してもok!です。<br />NULLは他のNULLとは異なるからです。
<div class="separator"></div>
NOT NULL制約とUNIQUE制約の両方を付ける場合には、通常は代わりにプライマリーキーとして設定します。
<h3>CHECK制約</h3>
より詳細に入力されるデータをチェックします。<br />以下のように記述します。
<code class="sql">
	CREATE table テーブル名 (
		カラム名 データ型 CHECK (条件式),
		カラム名 データ型 CHECK (条件式),
		カラム名 データ型 CHECK (条件式)
	);
</code>
<h3>AUTO_INCREMENT</h3>
AUTO_INCREMENTとは自動連番の意味で、idなどの一意性を求めるカラムを設定する際に自動で連番を振ってくれます。<br />AUTO_INCREMENTを設定すると、「1, 2, 3, 4, 5, ...」と「1」から始まる連番が自動で振られます。<br /><br />その性質上、デフォルト値やNOT NULL制約・UNIAUE制約は同時に設定しません。
<div class="separator2"></div>
では、pokemonテーブルをより厳格に定義しなおしてみましょう♪
<code class="sql">
	CREATE table pokemon2 (
		図鑑番号 INTEGER CHECK (0 < 図鑑番号),
		名前 CHAR(10) UNIQUE NOT NULL,
		タイプ1 CHAR(10) NOT NULL,
		タイプ2 CHAR(10),
		PRIMARY KEY (図鑑番号)
	);
</code>
<img src="../pics/制約.png" alt="テーブル制約" />
<?php footer(); ?>