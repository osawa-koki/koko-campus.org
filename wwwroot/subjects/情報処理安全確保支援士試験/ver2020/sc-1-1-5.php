<?php
require_once("common.php");
include_head("パスワードクラック");
?>

<script charset = "UTF-8" type = "text/javascript" src = "jquery-3.6.0.min.js" defer></script>

<div id = "main">
	<p id = "my_comment">前回の授業では、攻撃者の種類とそれに対する予防策を学びましたね♪<br><br>今回から6回の授業は具体的な攻撃手法について学んでいきます。<br><br>今回はパスワードを解読するパスワードクラックについて学びます。<br><br>それでは、Let's fly!</p>

	<h2>辞書攻撃</h2>
	<p>パスワードとして用いられそうな文字列が大量に登録されたファイル(辞書)を用いて順次試していく攻撃方法です。<br>一般的に業務用のパスワードでは「sys」「root」「admin」「pw」「pass」「temp」などの文字列が使われることが多いため、それらを成功するまで何度も入力していきます。<br></p>
<svg
	id = "svg0"
	viewBox="0 0 158.75 105.83334"
	version="1.1"
	xmlns="http://www.w3.org/2000/svg"
	xmlns:svg="http://www.w3.org/2000/svg">
	<ellipse
		cx="19.48842"
		cy="49.558788"
		rx="13.315618"
		ry="11.640142" />
	<path
		class="eye0"
		d="m 26.458333,44.45 -6.614583,5.820833 c 0,0 2.674652,0.274626 3.96875,0 0.849692,-0.180317 1.807185,-0.406459 2.38125,-1.058333 0.608539,-0.691021 0.772354,-1.725305 0.79375,-2.645833 C 27.0044,45.839593 26.458333,44.45 26.458333,44.45 Z" />
	<path
		d="m 10.583334,44.45 6.614583,5.820833 c 0,0 -2.674652,0.274626 -3.96875,0 C 12.379475,50.090516 11.421982,49.864374 10.847917,49.2125 10.239378,48.521479 10.075563,47.487195 10.054167,46.566667 10.037267,45.839593 10.583334,44.45 10.583334,44.45 Z" />
	<rect
		width="21.166666"
		height="34.395832"
		x="124.35416"
		y="31.75" />
	<rect
		class="window"
		width="8.8182898"
		height="3.8800473"
		x="127.51247"
		y="35.802258" />
	<rect
		class="window"
		width="8.8182898"
		height="3.8800473"
		x="127.68885"
		y="43.562351" />
	<text
		xml:space="preserve"
		transform="matrix(0.26458333,0,0,0.26458333,37.565915,50.440618)" >
		<tspan
			x="0"
			y="0"
			id="dic_text0">admin
		</tspan>
	</text>
	<text
		xml:space="preserve"
		transform="matrix(0.26458333,0,0,0.26458333,37.80346,42.055148)" >
		<tspan
			x="0"
			y="0"
			id="dic_text1">pass
		</tspan>
	</text>
	<text
		xml:space="preserve"
		transform="matrix(0.26458333,0,0,0.26458333,37.45073,58.809899)" >
		<tspan
			x="0"
			y="0"
			id="dic_text2">sys
		</tspan>
	</text>
</svg>
	<p class = "step">一般的な辞書に載っている単語や情報システムで良く用いられる用語の使用を避けて、ランダムな文字列にする。<br>IDに酷似したパスワードを用いない。</p>


	<h2>ブルートフォース攻撃</h2>
	<p>ブルートフォース(brute force)とは「強引な」の意味で、有り得るパスワード全て入力していきます。<br>別名「総当たり攻撃」です。</p>
<svg
	id = "svg1"
	viewBox="0 0 158.75 105.83334"
	version="1.1"
	xmlns="http://www.w3.org/2000/svg"
	xmlns:svg="http://www.w3.org/2000/svg">
	<ellipse
		cx="19.48842"
		cy="49.558788"
		rx="13.315618"
		ry="11.640142" />
	<path
		d="m 26.458333,44.45 -6.614583,5.820833 c 0,0 2.674652,0.274626 3.96875,0 0.849692,-0.180317 1.807185,-0.406459 2.38125,-1.058333 0.608539,-0.691021 0.772354,-1.725305 0.79375,-2.645833 C 27.0044,45.839593 26.458333,44.45 26.458333,44.45 Z" />
	<path
		d="m 10.583334,44.45 6.614583,5.820833 c 0,0 -2.674652,0.274626 -3.96875,0 C 12.379475,50.090516 11.421982,49.864374 10.847917,49.2125 10.239378,48.521479 10.075563,47.487195 10.054167,46.566667 10.037267,45.839593 10.583334,44.45 10.583334,44.45 Z" />
	<rect
		width="21.166666"
		height="34.395832"
		x="124.35416"
		y="31.75" />
	<rect
		class="window"
		width="8.8182898"
		height="3.8800473"
		x="127.51247"
		y="35.802258" />
	<rect
		class="window"
		width="8.8182898"
		height="3.8800473"
		x="127.68885"
		y="43.562351" />
	<text
		xml:space="preserve"
		transform="matrix(0.25,0,0,0.25,50,40)" >
		<tspan
			x="0"
			y="0" >user0123 (ID=>固定)
		</tspan>
	</text>
	<text
		xml:space="preserve"
		transform="matrix(0.25,0,0,0.25,35,55)" >
		<tspan
			x="0"
			y="0"
			id="brute_pw">0000
		</tspan>
	</text>
</svg>
	<p class = "step">パスワードの長さを十分に長く設置して、ランダムな文字列にする。</p>

	<h2>リバースブルートフォース攻撃</h2>
	<p>前述したブルートフォース攻撃がひとつのIDに対して大量のパスワードを入力するのに対して、リバースブルートフォース攻撃ではひとつのパスワードに対して大量のIDを入力していきます。<br><br>最近では、同一のIDで何回かログインに失敗したら一時的にログイン試行をロックするシステムが増えたのでその逆手をとる攻撃手法です。IDを特定していないので特定の人のアカウントへのログインを試みるのではなく、誰彼構わずにログインを試みる場合に用いられます。</p>
<svg
	id = "svg2"
	viewBox="0 0 158.75 105.83334"
	version="1.1"
	xmlns="http://www.w3.org/2000/svg"
	xmlns:svg="http://www.w3.org/2000/svg">
	<ellipse
		cx="19.48842"
		cy="49.558788"
		rx="13.315618"
		ry="11.640142" />
	<path
		d="m 26.458333,44.45 -6.614583,5.820833 c 0,0 2.674652,0.274626 3.96875,0 0.849692,-0.180317 1.807185,-0.406459 2.38125,-1.058333 0.608539,-0.691021 0.772354,-1.725305 0.79375,-2.645833 C 27.0044,45.839593 26.458333,44.45 26.458333,44.45 Z" />
	<path
		d="m 10.583334,44.45 6.614583,5.820833 c 0,0 -2.674652,0.274626 -3.96875,0 C 12.379475,50.090516 11.421982,49.864374 10.847917,49.2125 10.239378,48.521479 10.075563,47.487195 10.054167,46.566667 10.037267,45.839593 10.583334,44.45 10.583334,44.45 Z" />
	<rect
		width="21.166666"
		height="34.395832"
		x="124.35416"
		y="31.75" />
	<rect
		class="window"
		width="8.8182898"
		height="3.8800473"
		x="127.51247"
		y="35.802258" />
	<rect
		class="window"
		width="8.8182898"
		height="3.8800473"
		x="127.68885"
		y="43.562351" />
	<text
		xml:space="preserve"
		transform="matrix(0.25,0,0,0.25,50,40)" >
		<tspan
			x="0"
			y="0" >pw0123 (pw=>固定)
		</tspan>
	</text>
	<text
		xml:space="preserve"
		transform="matrix(0.25,0,0,0.25,35,55)" >
		<tspan
			x="0"
			y="0"
			id="reverse_id">user0000
		</tspan>
	</text>
</svg>
	<p class = "step">パスワード長さを十分に長く設置して、ランダムな文字列にする。</p>
	<h2>レインボー攻撃</h2>
	<p>レインボー攻撃の前にハッシュとは、、、<br><br>平文を暗号化して第三者に平文を特定されなくする技術で、ハッシュ演算では一方向性(「平文=>ハッシュダイジェスト」は求められるが、「ハッシュダイジェスト=>平文」は求められない)を保証します。<br><br>ハッシュ攻撃とは、ハッシュ演算で算出されたハッシュダイジェストから平文を特定する攻撃です。<br>具体的には、大量の「平文<=>ハッシュダイジェスト」の組み合わせを求めてそれを格納したレインボーテーブルを作成して、それを用いて「ハッシュダイジェスト=>平文」の特定に挑戦します。</p>
	<div class = "scroll_x">
		<table border = "1" id = "rainbow_table">
			<caption>レインボーテーブル(sha256)</caption>
			<thead>
				<tr>
					<th>平文</th>
					<th>ハッシュダイジェスト</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<th>ILoveYou!</th>
					<td>7502d2589a3588f2572619b7467c13afaa90e4559367537f1a9dfbf6c76c4e26</td>
				</tr>
				<tr>
					<th>ILikeYou</th>
					<td>13c7e1fb3c6d6f6b6dad7fe091f17b86e57f0f9f060921bd93d0dd528c8368fe</td>
				</tr>
				<tr>
					<th>INeedYou</th>
					<td>58301fe855d649c27817c02b28976263771600e7565ae472ac08d5972993e8a9</td>
				</tr>
				<tr>
					<th>IWantYou</th>
					<td>deafd2f0369e86e7adc5014e89645a21bb83f901a44f20eac17a75acc72f5b1d</td>
				</tr>
				<tr>
					<th>IPreferYou</th>
					<td>7f32a5cdcb99c8ad3a5c3c5007fed10fdc57167719f95fec09cef1998ecb331e</td>
				</tr>
				<tr>
					<th>...</th>
					<th>...</th>
				</tr>
			</tbody>
		</table>
	</div>
	<p class = "step">ソルトを使用する。<br>平文にソルト(適当な文字列)を付加してハッシュダイジェストを求めると、ソルトを用いないで算出したハッシュダイジェストとは全く異なるものとなり、「ハッシュダイジェスト=>平文(ソルトなし)」の特定が困難になる。<br>例えば上の「ILoveYou」にソルト「!」を付して、「ILoveYou!」のハッシュダイジェストを求めてみる。<br>「4194972483854c69e09e363d...」となり、1文字足すだけでハッシュダイジェストは全く異なるものとなることが分かる。この性質により、ソルトはレインボー攻撃に対する有効な対策となる。</p>
	<h2>パスワードリスト攻撃</h2>
	<p>他サイトから流出したIDとパスワードのセットを用いて、ログインを試みます。</p>
	<p class = "step">信頼できないwebサイトには登録しない。<br>複数のサイト間でパスワードを使いまわさない。</p>
	<h2></h2>
</div>


<?php
include_footer();
?>