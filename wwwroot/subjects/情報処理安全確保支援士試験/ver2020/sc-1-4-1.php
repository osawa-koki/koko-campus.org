<?php
require_once("common.php");
include_head("システム開発");
?>

<div id = "main">
	<p id = "my_comment">今回からはシステム開発技術について学びます。と同時にシステム開発技術の最終回です、、、<br><br>シラバスに沿って進めていたら分類が適切ではなくなってしまいました、、、<br>次回(シラバスが改定されたら)からは、僕なりに最適化して授業を進めますね♪<br><br>それでは、Let's smile!!</p>
	<!--
	-----詳細化-----
	<p>〇〇〇システム作って～～～って言われてもいきなりは作れませんよね、、、<br><br>システムを開発する際にはシステムを分割して、さらに分割して、さらに分割して、、、<br>小さな単位まで分解してそれを組み立てることで完成させます。<br><br>ここでは、システムをどのように分割していくかについて学びましょう♪</p>
	<svg
		viewBox="0 0 159 106"
		version="1.1"
		xmlns="http://www.w3.org/2000/svg"
		xmlns:svg="http://www.w3.org/2000/svg">
		<ellipse
			cx="82.5"
			cy="51.4"
			rx="48"
			ry="35.1"
			class="system0" />
		<path
			d="m 22.6,103 -3,-6 -6.5,3 -2.7,-5.4 6.3,-2.8 -14.06,-16.6 4.2,-13.2 12.66,4.5 4.3,22 5.9,-2.9 2.5,5.2 -6.2,3 3.1,6.2 z"
			id="sword" />
	</svg>
	-->
	<h2>V字開発モデル</h2>
	<p>システム開発をする際には、設計段階においては大きな単位から小さな単位へ分解して、テスト段階においては小さな単位を大きな単位へまとめあげていいます。<br><br>この流れが「V字開発モデル」と呼ばれます。</p>
	<div class = "scroll_x">
		<div id = "v-model_div">
			<div class = "arrow"></div>
			<div class = "arrow"></div>
			<div>システム要件定義</div>
			<div>システム方式設計</div>
			<div>ソフトウェア要件定義</div>
			<div>ソフトウェア方式設計</div>
			<div>ソフトウェア詳細設計</div>
			<div>プログラミング</div>
			<div>ソフトウェア単体テスト</div>
			<div>ソフトウェア結合テスト</div>
			<div>ソフトウェア適格性確認テスト</div>
			<div>システム結合テスト</div>
			<div>システム適格性確認テスト</div>
		</div>
	</div>
	<p>以下では、左の部分のシステム要件定義からソフトウェア詳細設計までを上流工程、プログラミングと右の部分のソフトウェア単体テストからシステム適合性確認テストまでを下流工程と呼びます。</p>
	<h2>上流工程</h2>
		<p>IPAはDX化のレベル以下の3つに区別しています。</p>
		<ol>
			<li>置き換え段階(人の作業からITの利用へ)</li>
			<li>効率化段階(一度完成したITシステムをよりよく)</li>
			<li>競争力強化段階(now!!!)</li>
		</ol>
		<span class = "quote">※参考サイトは<a href = "https://www.ipa.go.jp/files/000079352.pdf">こちら</a>。</span>
		<p>競争力強化段階においては、「<strong>攻めの上流工程</strong>」が大切とされ、ITシステム開発ではこの上流工程に関する知識が必要不可欠です。<br><br><small>※みなさんが、無事に情報処理安全確保支援士試験に合格したら次は「IT×経営」のプロフェッショナルとなるべく、「ITストラテジスト試験」にチャレンジすることをオススメします。</small></p>
		<div class = "separator"></div>
		<h3>システム要件定義</h3>
		<p>システム全体が実現すべき要件を確認する段階です。<br><br>主に以下の内容を決定します。</p>
		<ul>
			<li>目標</li>
			<li>対象範囲</li>
			<li>能力(レスポンスタイム・スループット)</li>
		</ul>
		<h3>システム方式設計</h3>
		<p>システム要件定義を満たす仕組みを最上位レベル(ハードウェア・ソフトウェア)で決定します。<br><br>主に以下の内容を決定します。</p>
		<ul>
			<li>冗長化・フォールトトレランス設計・サーバの機能配分</li>
			<li>外部パッケージを利用するか</li>
			<li>集中処理or分散処理(システムの処理方式)</li>
			<li>データベースの方式</li>
		</ul>
		<h3>ソフトウェア要件定義</h3>
		<p>ソフトウェアの構成を明確化すると同時に、機能やセキュリティの使用を確立します。<br><br>主に業務モデルや論理データモデルを活用してシステムを構成するソフトウェアに求められる機能・能力・インターフェースを決定します。<br><br>この段階では以下のことをします。</p>
		<ul>
			<li>サブシステム分割・仕様定義</li>
			<li>サブシステムインターフェース定義</li>
			<li>業務モデル・データモデルの設計</li>
			<li>セキュリティの設計</li>
			<li>保守性・移植性の考慮</li>
		</ul>
		<p>また、業務分析や要件定義には以下の手法が用いられます。</p>
		<ul>
			<li>ヒアリング</li>
			<li>ユースケース</li>
			<li>モックアップ・プロトタイプ</li>
			<li>DFD</li>
			<li>E-R図</li>
			<li>UML</li>
		</ul>
		<h3>ソフトウェア方式設計</h3>
		<p>ソフトウェア要件を実現させるという「方式」を決定します。<br><br>以下の内容が実行されます。</p>
		<ul>
			<li>インターフェースの最上位レベルの設計</li>
			<li>データベースの最上位レベルの設計</li>
			<li>ソフトウェア構造とコンポーネントの方式設計</li>
		</ul>
		<h3>ソフトウェア詳細設計</h3>
		<p>ソフトウェア方式設計を受けて実際にコンポーネント・モジュール単位まで分解します。</p>
	<h2>下流工程</h2>
		<h3>プログラミング</h3>
		<p>モジュールまで分解した後は、実際にプログラムコードを記述します。<br><br>モジュールまでの分解が適切であったかはこのモジュールの独立性によって判断されます。</p>
		<div class = "explanation">
			<span>モジュール独立性</span>とは、、、<br><br>
			他のモジュールからどのくらい独立しているかを表し、モジュール独立性が高いほど保守性が高くなるためよい設計であるといえます。<br><br>モジュール独立性を表す指標として「強度」と「結合度」があります。<br><br>よりよい設計のためには強度を高めて、結合度を低める必要があります。
		</div>
		<h3>ソフトウェア単体テスト</h3>
		<p>ソフトウェア単体(モジュール)で動作するかどうかをチェックします。</p>
		<h3>ソフトウェア結合テスト</h3>
		<p>複数のモジュールを組み合わせて正常に動作するかチェックします。</p>
		<h3>ソフトウェア適格性確認テスト</h3>
		<p>ソフトウェア要件定義を満たしているかどうかをチェックします。</p>
		<h3>システム結合テスト</h3>
		<p>システム全体として正常に動作するかチェックします。</p>
		<h3>システム適格性確認テスト</h3>
		<p>システム要件定義を満たしているかチェックします。</p>

	<h2></h2>
</div>

<?php
include_footer();
?>