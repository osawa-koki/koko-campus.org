<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-01-20",
	"updated" => "2022-01-20"
);
head($obj);
?>
<h2>式と文</h2>
関数の説明に入る前に、式と文の違いについて説明します。<br />実際のところ、両者の区別ってかなり曖昧なんですけどね、、、<br />例えば、ある言語では式となるものが他の言語では文となることもあります。
<h3>式</h3>
簡単に言えば評価した際に何らかのデータを発するモノを指します。<br />例えば「1 + 1」評価すると「2」となり、「add(1, 2)」を評価すると「3」となるため、これは式であると言えます。
<p class="r">add関数は引数の和を返す関数とします。</p>
これに対して、「let i = 0」は文であるため、これを評価しても値を発しません。<br />「let total = add(1, 2)」も同様に式ではなく、文となります。
<div class="separator"></div>
<img src="../pics/式・文.png" alt="式と文" />
<h2>関数の定義</h2>
rustでの関数の定義は他の言語と少し異なり、以下のようになります。
<code class="rust">
	fn 関数名(仮引数名: 仮引数の型) =&gt; 戻り値の型 {
		//関数の本体
	}
</code>
では、2つの引数の和を返す簡単な関数を作成してみましょう♪
<code class="rust">
	fn add(x: i8, y: i8) -> i8 {
		let z = x + y;
		return z;
	}
	fn main() {
		println!("{}", add(2, 5)); //「7」と出力
		println!("{}", add(50, 5)); //「7」と出力
		println!("{}", add(10, 25)); //「7」と出力
	}
</code>
他の言語と同様にreturn文を使用して戻り値を指定することもできますが、Rustでは関数の戻り値は関数本体ブロックの最後の式の値となるため、これを用いることが多いです。<br />戻り値がない場合は式と戻り値の型を書かなければok!です。
<code class="rust">
	fn add(x: i8, y: i8) -> i8 {
		x + y //式であるため、「;」を置いたらng!
	}
	fn main() {
		println!("{}", add(2, 5)); //「7」と出力
		println!("{}", add(50, 5)); //「7」と出力
		println!("{}", add(10, 25)); //「7」と出力
	}
</code>
<?php footer(); ?>