<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-01-20",
	"updated" => "2022-01-20"
);
head($obj);
?>
<h2>型注釈</h2>
rustは静的型付けを採用しているため、コンパイル時に全ての変数のデータ型が決定されます。<br />c/c++と異なり、rustでは変数の宣言時に必ず変数の型を指定する必要はありませんが、変数のとりうるデータ型が2種類以上ある場合には、これを明示的に行う必要があります。<br />これを実現する変数の後に書くキーワードを型注釈と呼びます。
<code class="rust">
	let num: u32 = 1025;
</code>
num変数をu32(符号なし32ビット整数型)で宣言しています。<br />もっとも、上のコードは型注釈を付ける必要はありませんが、、、
<h2>rustでのデータ型</h2>
rustでのデータ型は「スカラー型」と「複合型」に大別されます。
<h3>スカラー型</h3>
いわゆる単独型です。<br />スカラー型のデータ型には以下の4種類あります。
<ul>
	<li>整数型</li>
	<li>浮動小数点型</li>
	<li>真偽値型</li>
	<li>文字型</li>
</ul>
<h4>整数型</h4>
整数を扱います。<br />符号付きかどうかとビット数から8通りあります。
<table>
	<caption>整数型</caption>
	<thead>
		<th>ビット数</th>
		<th>符号付き</th>
		<th>符号なし</th>
	</thead>
	<tbody>
		<tr>
			<th>8ビット</th>
			<td>i8</td>
			<td>u8</td>
		</tr>
		<tr>
			<th>16ビット</th>
			<td>i16</td>
			<td>u16</td>
		</tr>
		<tr>
			<th>32ビット</th>
			<td>i32</td>
			<td>u32</td>
		</tr>
		<tr>
			<th>64ビット</th>
			<td>i64</td>
			<td>u64</td>
		</tr>
	</tbody>
</table>
符号付きと符号なしは負の値を考慮するかどうかです。<br />例えば、ある変数が10通りの数字を保持できると仮定します。<br />この場合、保持できる数字は「0, 1, 2, 3, 4, 5, 6, 7, 8, 9」ないしは「-5, -4, -3, -2, -1,  0, 1, 2, 3, 4」の2通りあります。<br />符号ありの場合は「0, 1, 2, 3, 4, 5, 6, 7, 8, 9」を想定し、符号なしの場合は「-5, -4, -3, -2, -1,  0, 1, 2, 3, 4」を想定します。<br /><br />数字の表現については以下の方法があります。
<table>
	<caption>整数の表現</caption>
	<tbody>
		<tr>
			<th>10進数</th>
			<td>そのまま、数字を書きます。<br />「10」「25」「999」</td>
		</tr>
		<tr>
			<th>16進数</th>
			<td>「0x」から始めます。<br />「0xf6」「0xff」「0xdf」</td>
		</tr>
		<tr>
			<th>8進数</th>
			<td>先頭に「0」を付けます。<br />「025」「010」「055」</td>
		</tr>
		<tr>
			<th>2進数</th>
			<td>「0b」から始めます。<br />「0b110010」「0x10」「0b1010」</td>
		</tr>
	</tbody>
</table>
<code class="rust">
	let a: i32 = 0xff;
	let b: u8 = 055;
	let c: i16 = 0b1100;
	let d: i64 = 500;
</code>
<h4>浮動小数点型</h4>
小数を扱うデータ型です。<br />ビット数によって以下の2つにを使い分けます。
<table>
	<caption>浮動小数点数型</caption>
	<tbody>
		<tr>
			<th>32ビット</th>
			<td>f32</td>
		</tr>
		<tr>
			<th>64ビット</th>
			<td>f64</td>
		</tr>
	</tbody>
</table>
f32は単精度浮動小数点数型で、f64は倍精度浮動小数点数型です。
<code class="rust">
	let i: f32 = 99.9;
	let n: f64 = -99.9;
</code>
<h4>真偽値型</h4>
「true」と「false」の2通りです。<br />条件分岐で使用します。<br />型注釈を行う際には「bool」とします。
<code class="rust">
	let check: bool = true;
</code>
<h4>文字型</h4>
ユニコード文字1文字分を格納するデータ型です。<br />c/c++と異なり、アスキー文字以外も扱えます。<br />シングルクォーテーションで囲って表現します。
<code class="rust">
	let x = '🤐';
</code>
コマンドプロンプトでは表示できませんが、絵文字も使用できます。
<h3>複合型</h3>
rustでの複合型変数は以下の2つです。
<ul>
	<li>配列型</li>
	<li>tuple型</li>
</ul>
<h4>配列型</h4>
宣言・初期化の方法、さらにはアクセス方法も他のプログラミング言語とほとんどです。<br />しかしながら、c/c++と違って、初期化時に要素数を指定する必要はありません。<br />固定長で初期化時に自動で決定されるので当然ですが、、、<br />さらには、別に問題ないと思いますが、異なるデータ型の要素を格納できません。<br />個人的にはpythonやjavascriptが異なるデータ型の要素を含めることができる方が問題だと思うのですが、、、
<code class="rust">
	fn main() {
		let ary = ["ピチュー", "ピカチュウ", "ライチュー"];
		println!("{}", ary[1]); //「ピカチュウ」と出力
	}
</code>
rustでは他の言語と異なり配列は固定長であるため、後から要素を増やす、ないしは、減らすことが許されません。<br />可変長の配列はrustでは標準ライブラリで提供されているベクタ型を使用します。<br />また、c/c++と異なり、存在しない要素に対する処理をする以下のコードは明確にエラーとなります。
<code class="rust">
	fn main() {
		let ary = ["ピチュー", "ピカチュウ", "ライチュウ"];
		ary[10] = "エモンガ"; //存在しない要素への処理
	}
</code>
<img src="../pics/配列要素-バッファオーバーフロー.png" alt="配列要素-バッファオーバーフロー" />
c/c++の国際標準ではこれに関しては未定義ですので、有り得ない動作をするコンパイラも存在します。<br />僕が使っているcコンパイラはちゃんとエラーを吐き出してくれますが、、、<br />rustでは規格としてしっかりとこれに関してはエラーを吐き出してくれます。
<h4>tuple型</h4>
tuple型は異なるデータ型の要素を1つにまとめるデータ型です。<br />それぞれの要素に関してデータ型を宣言する必要がります。<br />以下のように作成します。
<code class="rust">
	let tpl: (bool, i32, f64) = (true, 1025, -99.99);
</code>
データを取得するには「タプル型変数.インデックス番号」と書きます。<br />インデックス番号は他の言語と同様に「0」から始まります。
<code class="rust">
	fn main() {
		let tpl: (bool, i32, f64) = (true, 1025, -99.99);
		println!("一つ目の要素は {}", tpl.0);
		println!("二つ目の要素は {}", tpl.1);
		println!("三つ目の要素は {}", tpl.2);
	}
	/* &darr; コンソール &darr;
	一つ目の要素は true
	二つ目の要素は 1025
	三つ目の要素は -99.99
	*/
</code>
以下のように各要素に分解して取得する方法もあります。
<code class="rust">
	fn main() {
		let tpl: (bool, i32, f64) = (true, 1025, -99.99);
		let (x, y, z) = tpl;
		println!("一つ目の要素は {}", x);
		println!("二つ目の要素は {}", y);
		println!("三つ目の要素は {}", z);
	}
	/* &darr; コンソール &darr;
	一つ目の要素は true
	二つ目の要素は 1025
	三つ目の要素は -99.99
	*/
</code>
<h2>型変換(数字型)</h2>
rustでは異なるデータ型同士の演算は行えません。<br />例え、同じ整数型であっても符号の有無が異なる「u8」と「i8」では演算を行えません。<br />例えば以下のコードはエラーとなります。
<code class="rust">
	fn main() {
		let x: i8 = 1;
		let y: u8 = 1;
		println!("{}", x + y);
	}
</code>
<img src="../pics/異なるデータ型の演算(符号).png" alt="異なるデータ型の演算" />
符号の有無が同じでもビット数が異なればエラーとなります。
<code class="rust">
	fn main() {
		let x: i8 = 1;
		let y: i16 = 1;
		println!("{}", x + y);
	}
</code>
<img src="../pics/異なるデータ型の演算(ビット数).png" alt="異なるデータ型の演算" />
データ型を変換する方法は以下の2つあります。
<ul>
	<li>from</li>
	<li>as</li>
</ul>
<h3>from</h3>
以下のように記述します。
<code class="rust">
	変換後データ型::from(変換対象の変数)
</code>
先ほどの異なる演算でエラーになったコードを型変換してみましょう♪
<code class="rust">
	fn main() {
		let x: i8 = 1;
		let y: i16 = 1;
		println!("{}", i16::from(x) + y); //「2」と出力
	}
</code>
x変数をi8データ型からi16データ型に変換してから演算を行っています。<br />この変換はあくまでも「Lossless」である必要があるため、以下のコードはエラーとなります。
<code class="rust">
	fn main() {
		let x: i8 = 1;
		let y: i16 = 1;
		println!("{}", x + i8::from(y); //エラー
	}
</code>
<img src="../pics/from-エラー.png" alt="不完全な型変換" />
簡単に言えば、小さいデータ型から大きいデータ型への変換はok!ですが、大きいデータ型から小さいデータ型への変換はデータが失われる危険性があるため、エラーとなります。
<h3>as</h3>
この方法を使っておけばok!だと思います。<br /><a href="https://doc.rust-jp.rs/rust-by-example-ja/types/cast.html">公式ドキュメント</a>でもこの方法で説明されています。<br />以下のように記述します。
<code class="rust">
	変換対象の変数 as 変換後のデータ型
</code>
では先ほどエラーとなったコードをこの方法で変換してみましょう♪
<code class="rust">
	fn main() {
		let x: i8 = 1;
		let y: i16 = 1;
		println!("{}", x + y as i8; //「2」と出力
	}
</code>
<h2>型変換(数字 &hArr; 文字列)</h2>
今度は数字と文字列を相互に変換できるようになりましょう♪
<h3>数字 &#8658; 文字列</h3>
「&amp;str」と「String」型への変換で方法が異なります。
<h4>数字 &#8658; String型</h4>
&amp;str型からString型への変換と同様にto_string()メソッドを使用します。
<code class="rust">
	let num = 50.to_string();
</code>
<h4>数字 &#8658; &amp;str型</h4>
一度、String型に変換してから「&amp;」を先頭に着けて&amp;str型に変換します。
<code class="rust">
	let num = 50.to_string();
	let wd = &amp;num;
</code>
<h3>文字列 &#8658; 数字</h3>
.trim().parse().ok().unwrap()と4つのメソッドを使用します。
<code class="rust">
	let wd: i8 = "50".trim().parse().ok().unwrap();
</code>
4つのメソッドについて説明しますが、ここでは完全に覚える必要はありません。<br />後ほど詳しく説明します。
<h4>.trim()</h4>
末尾の空白が削除された文字列スライスを取得します。<br />省略しても動作しますが、ユーザが入力したデータを数字型に変換する際には省略できません。
<h4>.parse()</h4>
文字列スライス型のデータを数字に変換します。<br />戻り値はResult型であるため、これを数字として処理するには下で説明する.ok()メソッドを使用する必要があります。
<h4>.ok()</h4>
エラーハンドリング用のメソッドです。<br />Result型のデータの処理に成功した場合にそのデータを返し、失敗した場合は強制的にプログラムを終了させます。<br />rustは安全であることを求めるため、ユーザから入力したデータの加工に関しては.ok()でエラーに対応する必要があります。<br />Option型のデータを返すため、次に説明する.unwrap()メソッドを使用して数字を取得する必要があります。<br />詳しくはエラーハンドリングの授業で説明します。
<h4>.unwrap()</h4>
データを受け取らなかった場合のエラーハンドリングです。<br />詳しくはエラーハンドリングの授業で説明します。
<div class="separator"></div>
変換後のデータ型を明示する必要があります。<br />以下のように変換後のデータ型を指定しなかった場合はエラーとなります。
<code class="rust">
	let wd = "50".trim().parse().ok().unwrap();
</code>
<img src="../pics/parse-unwrap_型注記.png" alt="型変換 型の明示" />
<h2>演算</h2>
ではデータ型の変換ができるようになったので、実際に簡単な演算を行いましょう♪<br />他のプログラミング言語と同じです。
<h3>算術演算</h3>
<table>
	<caption>算術演算</caption>
	<tbody>
		<tr>
			<th>+</th>
			<td>足し算です。</td>
		</tr>
		<tr>
			<th>-</th>
			<td>引き算です。</td>
		</tr>
		<tr>
			<th>*</th>
			<td>掛け算です。</td>
		</tr>
		<tr>
			<th>/</th>
			<td>割り算です。</td>
		</tr>
		<tr>
			<th>%</th>
			<td>割り算の余りです。</td>
		</tr>
	</tbody>
</table>
<code class="rust">
	fn main() {
		println!("{}", 2 + 5); //「7」
		println!("{}", 5 - 1); //「4」
		println!("{}", 2 * 5); //「10」
		println!("{}", 7 / 2); //「3」
		println!("{}", 7 % 3); //「1」と出力
	}
</code>
「7 / 2」が「3」と、小数点以下が切り捨てられていますね、、、<br />これは「7」も「3」も整数型であるため、結果も整数があっとなってしまうからです。<br />解決方法は浮動小数点数型に変換してから演算します。
<code class="rust">
	fn main() {
		println!("{}", 7 as f64 / 2 as f64);
	}
</code>
なんだか、面倒くさいような、、、<br />因みに以下のコードではダメです。
<code class="rust">
	fn main() {
		println!("{}", (7 / 2) as f64); //「3」と出力
	}
</code>
「7 / 2」をされた時点で既に小数点以下は切り捨てられているので、これを浮動小数点数型に変換しても時すでにお寿司です、、、<br /><br />それ以外の方法としてはかなり強引ですが、整数を「.0」を付けて無理やり浮動小数点数型にすればok!です。
<code class="rust">
	fn main() {
		println!("{}", 7.0 / 2.0) //「3.5」と出力
	}
</code>
予め浮動小数点数用の変数を確保しておいて、そこに代入してもok!です。
<code class="rust">
	fn main() {
		let x: f64;
		x = 7.0 / 2.0;
		println!("{}", x); //「3.5」と出力
	}
</code>
<h3>論理演算</h3>
<table>
	<caption>論理演算</caption>
	<tbody>
		<tr>
			<th>&amp;&amp;</th>
			<td>論理積演算です。<br />両方とも「true」ならば「true」、それ以外は「false」になります。</td>
		</tr>
		<tr>
			<th>||</th>
			<td>論理和演算です。<br />どちらか一方でも「true」ならば「true」、それ以外は「false」になります。</td>
		</tr>
	</tbody>
</table>
<h3>関係演算</h3>
<table>
	<caption>関係演算</caption>
	<tbody>
		<tr>
			<th>&lt;</th>
			<td>「小なり」<br />右の数字が左の数字よりも(同じを含まない)大きければ「true」、それ以外は「false」となります。</td>
		</tr>
		<tr>
			<th>&lt;=</th>
			<td>「小なりイコール」<br />右の数字が左の数字以上(同じを含む)であれば「true」、それ以外は「false」となります。</td>
		</tr>
		<tr>
			<th>&gt;</th>
			<td>「大なり」<br />右の数字が左の数字よりも(同じを含まない)小さければ「true」、それ以外は「false」となります。</td>
		</tr>
		<tr>
			<th>&gt;=</th>
			<td>「大なりイコール」<br />右の数字が左の数字以下(同じを含む)であれば「true」、それ以外は「false」となります。</td>
		</tr>
		<tr>
			<th>==</th>
			<td>「イコール(等価演算)」<br />左と右のデータが<span class="u">型は考慮せずに</span>同じであれば「true」、それ以外は「false」となります。<br />「1 === "1"」は「true」となります。</td>
		</tr>
		<tr>
			<th>!=</th>
			<td>「ノットイコール(等価演算)」<br />「==」の結果を反転したものです。<br />「1 != "1"」は「false」となります。</td>
		</tr>
	</tbody>
</table>
<?php footer(); ?>