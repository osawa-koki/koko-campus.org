<?php
require(__DIR__. "/../../framework/ver3.1/common.php");
$obj = array(
	"made" => "2022-03-25",
	"updated" => "2022-03-25"
);
head($obj);
?>
<h2>データベース</h2>
データベースとは、その名の通り大量のデータを集めたファイル、並びにそのファイルを管理するシステムを言います。<br /><br />ユーザ、またはプログラムがデータベースファイルを直接操作することはせずに、DBMSと呼ばれるプログラムに操作命令であるSQL文を発行して代わりに処理をしてもらいます。
<img src="../pics/データベース.png" alt="データベース" />
<h2>関係データベース</h2>
データベースはデータをどのような構造で管理するかで幾つかの種類に分類できますが、ここでは最も代表的な関係データベースに関して説明します。<br /><br />関係データベースとは、エクセルのような行と列による二次元のデータを格納するためのデータベースです。<br />また、行と列からなる表のことをテーブルと呼びます。<br />さらに、複数のテーブルをまとめたものをデータベースと言います。
<img src="../pics/関係dbの構造.png" alt="関係データベース" />
テーブルの行のことを<strong>レコード・タプル</strong>、列のことを<strong>フィールド</strong>と呼ぶこともあります。
<h2>主キーと外部キー</h2>
例えば、僕がゲットしたポケモンを管理するデータベースを想定してください。<br />おそらく以下のようになります。
<div class="scroll-600w">
	<table>
	<caption>kokoのポケモン</caption>
		<thead>
			<tr>
				<th>ニックネーム</th>
				<th>入手日</th>
				<th>名前</th>
				<th>タイプ1</th>
				<th>タイプ2</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>ぴかっち</td>
				<td>2022/03/01</td>
				<td>ピカチュウ</td>
				<td>でんき</td>
				<td>なし</td>
			</tr>
			<tr>
				<td>ちこりん</td>
				<td>2022/03/05</td>
				<td>チコリータ</td>
				<td>くさ</td>
				<td>なし</td>
			</tr>
			<tr>
				<td>どんどん</td>
				<td>2022/03/07</td>
				<td>リザードン</td>
				<td>ほのお</td>
				<td>ひこう</td>
			</tr>
		</tbody>
	</table>
</div>
これだとなんだか綺麗ではありません、、、<br /><br />例えば、ピカチュウを三匹仲間にした場合はどうなるでしょうか???
<div class="scroll-600w">
	<table>
		<caption>kokoのポケモン</caption>
		<thead>
			<tr>
				<th>ニックネーム</th>
				<th>入手日</th>
				<th>名前</th>
				<th>タイプ1</th>
				<th>タイプ2</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>ぴかっち</td>
				<td>2022/03/01</td>
				<td>ピカチュウ</td>
				<td>でんき</td>
				<td>なし</td>
			</tr>
			<tr>
				<td>ちこりん</td>
				<td>2022/03/05</td>
				<td>チコリータ</td>
				<td>くさ</td>
				<td>なし</td>
			</tr>
			<tr>
				<td>どんどん</td>
				<td>2022/03/07</td>
				<td>リザードン</td>
				<td>ほのお</td>
				<td>ひこう</td>
			</tr>
			<tr>
				<td>ぴかぴか</td>
				<td>2022/03/10</td>
				<td>ピカチュウ</td>
				<td>でんき</td>
				<td>なし</td>
			</tr>			<tr>
				<td>ぴかぴっぴ</td>
				<td>2022/03/11</td>
				<td>ピカチュウ</td>
				<td>でんき</td>
				<td>なし</td>
			</tr>
		</tbody>
	</table>
</div>
ピカチュウがでんき単体タイプであることはkokoのポケモンに関わらず、成立します。<br />ということで、ポケモンテーブルを作成して、それをkokoのテーブルに結合した方が綺麗になりそうですね♪<br /><br />したがって、先ほどのテーブルは以下の2つのテーブルに分割して管理しましょう♪
<div class="scroll-600w">
	<table>
	<caption>kokoのポケモン</caption>
		<thead>
			<tr>
				<th>ニックネーム</th>
				<th>入手日</th>
				<th>名前</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>ぴかっち</td>
				<td>2022/03/01</td>
				<td>ピカチュウ</td>
			</tr>
			<tr>
				<td>ちこりん</td>
				<td>2022/03/05</td>
				<td>チコリータ</td>
			</tr>
			<tr>
				<td>どんどん</td>
				<td>2022/03/07</td>
				<td>リザードン</td>
			</tr>
			<tr>
				<td>ぴかぴか</td>
				<td>2022/03/10</td>
				<td>ピカチュウ</td>
			</tr>			<tr>
				<td>ぴかぴっぴ</td>
				<td>2022/03/11</td>
				<td>ピカチュウ</td>
			</tr>
		</tbody>
	</table>
</div>
<table>
	<caption>ポケモン</caption>
	<thead>
		<tr>
			<th>名前</th>
			<th>タイプ1</th>
			<th>タイプ2</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>.....</td>
			<td>.....</td>
			<td>.....</td>
		</tr>
		<tr>
			<td>ピカチュウ</td>
			<td>でんき</td>
			<td>なし</td>
		</tr>
		<tr>
			<td>.....</td>
			<td>.....</td>
			<td>.....</td>
		</tr>
		<tr>
			<td>リザードン</td>
			<td>ほのお</td>
			<td>ひこう</td>
		</tr>
		<tr>
			<td>.....</td>
			<td>.....</td>
			<td>.....</td>
		</tr>
		<tr>
			<td>チコリータ</td>
			<td>くさ</td>
			<td>なし</td>
		</tr>
		<tr>
			<td>.....</td>
			<td>.....</td>
			<td>.....</td>
		</tr>
	</tbody>
</table>
これを必要時に合体させて表示させた方が綺麗ですよね♪
<div class="separator"></div>
テーブル同士を合体させる際に、なんらかのキーワードが必要です。<br />例えば、先ほどの例では、kokoのポケモンテーブルのポケモンの名前からポケモンテーブルの行を指定して合体させています。<br /><br />呼び出し元となるキーワードを<strong>主キー</strong>と呼び、主キーから指定された外部テーブルのキーワードを<strong>外部キー</strong>と言います。
<img src="../pics/テーブルの結合.png" alt="テーブルの結合" />
<h2>インデックス</h2>
インデックスとはテーブルでのID的な役割を果たし、ある列の条件から行を特定するために使用されます。<br />使用目的は検索を最適化するためです。<br />通常はIDなどの重複しない列に設定します。
<h2>正規化</h2>
ひとつのテーブルに大量のデータを無秩序に詰め込むとデータのまとまりがそこ慣れるだけでなく、重複が生じて実行効率が低下する危険性があります。<br />先ほどの例では以下のテーブルが該当します。
<div class="scroll-600w">
	<table>
		<caption>kokoのポケモン</caption>
		<thead>
			<tr>
				<th>ニックネーム</th>
				<th>入手日</th>
				<th>名前</th>
				<th>タイプ1</th>
				<th>タイプ2</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>ぴかっち</td>
				<td>2022/03/01</td>
				<td>ピカチュウ</td>
				<td>でんき</td>
				<td>なし</td>
			</tr>
			<tr>
				<td>ちこりん</td>
				<td>2022/03/05</td>
				<td>チコリータ</td>
				<td>くさ</td>
				<td>なし</td>
			</tr>
			<tr>
				<td>どんどん</td>
				<td>2022/03/07</td>
				<td>リザードン</td>
				<td>ほのお</td>
				<td>ひこう</td>
			</tr>
			<tr>
				<td>ぴかぴか</td>
				<td>2022/03/10</td>
				<td>ピカチュウ</td>
				<td>でんき</td>
				<td>なし</td>
			</tr>			<tr>
				<td>ぴかぴっぴ</td>
				<td>2022/03/11</td>
				<td>ピカチュウ</td>
				<td>でんき</td>
				<td>なし</td>
			</tr>
		</tbody>
	</table>
</div>
この例では、ポケモンの名前とタイプ1・タイプ2の間に従属関係があるため、この部分が重複しています。<br />既に説明しましたが、これはテーブルを適切に分割することで解決可能です。<br /><br />このように、テーブル内の冗長な情報を分離させて整理する作業を正規化と言います。
<h2>データ操作</h2>
先ほど、ユーザやプログラムが直接データベースファイルを操作することはせずに、DBMSというプログラムにSQLという命令文を送信して代わりに処理をしてもらうと説明しましたね♪
<img src="../pics/データベース.png" alt="データベース" />
ここでは、このSQL文について説明します。<br />といってもSQLの文法は対象外なので、SQLでどんな処理ができるのかだけ覚えてください。
<ul>
	<li>検索</li>
	<li>削除</li>
	<li>更新</li>
	<li>削除</li>
</ul>
それとは別に以下の3つの操作も覚えましょう♪
<table>
	<tbody>
		<tr>
			<th>選択</th>
			<td>表の中から条件に合致した行だけを抽出します。</td>
		</tr>
		<tr>
			<th>射影</th>
			<td>表の中から指定した列だけを抽出します。</td>
		</tr>
		<tr>
			<th>結合</th>
			<td>複数の条件にしたがって結びつけ、別に新しい表を作ります。</td>
		</tr>
	</tbody>
</table>
<h2>トランザクション処理</h2>
トランザクションとは、分離不可能な一連の処理のまとまりを言います。<br />例えば、銀行振込での処理は振込元口座からの金額の減算と振込先口座への金額の追加はワンセットですよね♪<br />途中で停電があって、振込元口座から金額は引かれたけど振込先口座に金額が追加されていない状態は絶対にあってはなりません。<br /><br />このような処理(トランザクション)が持つべき性質はACID特性と呼ばれます。
<table>
	<tbody>
		<tr>
			<th>A</th>
			<td>「Atomicity」の略で、原子性と呼ばれます。<br />トランザクションは全て行われるか、全く行われないかのいずれかであり、中途半端に行われることはありません。</td>
		</tr>
		<tr>
			<th>C</th>
			<td>「Consistency」の略で、一貫性と訳されます。<br />トランザクションはDBの内容を矛盾させないことを要求します。</td>
		</tr>
		<tr>
			<th>I</th>
			<td>「Isolation」の略で、独立性と訳されます。<br />トランザクションは他のトランザクションの影響を受けないことを要求します。</td>
		</tr>
		<tr>
			<th>D</th>
			<td>「Durability」の略で、耐久性と訳されます。<br />正常に終了したトランザクションの結果が失われないことを要求します。</td>
		</tr>
	</tbody>
</table>
<h3>障害回復</h3>
各トランザクションの実行状況は、ジャーナルファイル(ログファイル)と呼ばれる履歴用のファイルに保存され、障害発生時に回復するために使用されます。<br /><br />回復するための方法には以下の2通りあります。
<table>
	<thead>
		<tr>
			<th width="50%">ロールバック</th>
			<th width="50%">ロールフォワード</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>トランザクションによる更新を取り消します。</td>
			<td>障害発生時に既にコミットしていたトランザクションによる更新をデータベースに反映させます。</td>
		</tr>
	</tbody>
</table>
<h2>排他制御</h2>
排他制御とは、同時にデータベースに関する処理をしたために発生する不整合を防ぐために技術です。<br />15000円持っていて、同時に2人から10000円貸手と要求されて2人ともにok!と返事して実際にはお金がなかったなんてならないようにするための技術です。<br /><br />排他制御の本質は1つの処理だけにそのデータを更新する権利を与えて、それ以外はその更新処理が終わるまで待たせます。<br /><br />排他制御を実現するために使用される技術が<strong>ロック</strong>と呼ばれます。<br />他のトランザクションがアクセスできないようにする仕組みを言います。<br />正しく設定しないと、複数のトランザクションがお互いの資源のロック解除を永遠に待ち続ける<strong>デッドロック</strong>が発生する危険性があります。<br /><br />例えば、A君とB君とC君が映画を見に行くかの相談をしているとしましょう。<br />三人の関係は少し複雑で、A君はB君が好きで、B君はC君が好きで、C君はA君が好きなのですが、三人とも素直になれません。<br />それぞれ、好きな人が行くと言ったら自分も行くと言う場合はどうなるでしょうか???<br />永遠と沈黙が続きます。<br />これがデッドロックです。
<?php footer(); ?>