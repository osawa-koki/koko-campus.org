<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-03-08",
	"updated" => "2022-03-08"
);
head($obj);
?>
<h2>メソッド</h2>
メソッドとは一連の処理をひとまとめにしたものを言います。<br />他の言語では関数と呼ばれることが多いですが、rubyは強いオブジェクト指向言語ですので関数ではなくメソッドと呼ぶことが多いです。
<p>オブジェクト指向については後ほど説明します。</p>
一般的にはメソッドにあるデータを引数として与えて、メソッドが処理したデータを戻り値として受け取ります。
<img src="../pics/メソッド.png" alt="メソッド" />
<h2>引数と戻り値</h2>
メソッドに処理をお願いするデータを引数、メソッドが処理して呼び出しもとに返すデータを戻り値と言います。
<img src="../pics/引数と戻り値.png" alt="引数と戻り値" />
<h3>引数</h3>
メソッドを呼び出す際に与える引数のことを特に実引数と呼び、メソッド内で受け取る引数のことを特に仮引数と呼びます。
<img src="../pics/実引数と仮引数.png" alt="実引数と仮引数" />
<h3>戻り値</h3>
メソッド内で処理された後にメソッドの呼び出し元に返すデータを言います。<br />rubyでは戻り値はひとつだけしか返すことができません。<br />複数のデータを返す必要がある場合には配列型のデータに格納して返します。
<h2>メソッドの定義</h2>
メソッドは以下のように定義します。
<code class="ruby">
	def メソッド名(引数)
		# メソッド内の処理...
		# メソッド内の処理...
		# メソッド内の処理...
		return 戻り値
	end
</code>
引数が複数ある場合は「,(カンマ)」で区切って表記します。<br /><br />戻り値はreturnの後に書きます。<br />returnを用いて明示的に戻り値を指定しない場合はメソッド内で最後に評価された式の値が戻り値となります。
<div class="separator"></div>
では、引数2つの和を返す簡単なメソッドを定義しましょう♪
<code class="ruby">
	def add(x, y)
		return x + y
	end
</code>
これはreturnを省略して以下のように書くこともできます。
<code class="ruby">
	def add(x, y)
		x + y
	end
</code>
<h2>メソッドの呼び出し</h2>
メソッドは以下のように呼び出します。
<code class="ruby">
	メソッド名(引数)
</code>
括弧を省略して以下のように書くこともできます。
<code class="ruby">
	メソッド名 引数
</code>
<div class="separator"></div>
では、先ほど定義したメソッドを呼び出してみましょう♪
<code class="ruby">
	def add(x, y)
		x + y
	end

	puts add(2, 5)

	# ***** コンソール *****
	# 7
	# ***** ******** ******
</code>
<h2>特殊なメソッド引数</h2>
メソッドの引数にはデフォルト値を設定することや名前を設定することが可能です。
<ul>
	<li>デフォルト引数</li>
	<li>キーワード引数</li>
</ul>
<h3>デフォルト引数</h3>
引数を省略した場合に自動で設定される値を設定することができます。<br />引数の部分に以下のように書きます。
<code class="ruby">
	引数名 = デフォルト値
</code>
例えば、ある価格の税込価格を計算するメソッドで税率部分をデフォルトで「1.08」に設定しましょう♪
<code class="ruby">
	def taxing(price, tr=1.08)
		return price * tr
	end

	puts taxing 100
	puts taxing 100, 1.1

	# ***** コンソール *****
	# 108.0
	# 110.00000000000001
	# ***** ******** ******
</code>
第二引数を省略した場合はtr変数として「1.08」が採用され、第二引数を指定した場合はその値(1.1)が採用されています。
<p>二進数での計算の関係上、若干の誤差が出ています。</p>
<h3>キーワード引数</h3>
引数が複数ある場合はその順番で管理されますが、キーワード引数を使うことで実引数と仮引数を名前で結びつけることができます。<br />以下のように書きます。
<code class="ruby">
	引数名: デフォルト値
</code>
デフォルト値を指定しない場合は「nil」とします。
<p>nilとは何もないことを示すデータ型です。<br />他の言語では「null」や「void」と呼ばれることもあります。</p>
メソッドにキーワード引数を渡すには以下のように書きます。
<code class="ruby">
	キーワード: 実引数
</code>
では、半径と円周率を引数としてとって面積を算出するメソッドを定義してみましょう♪
<code class="ruby">
	def area(r: nil, pai: 3.14)
		return r ** 2 * pai
	end

	puts area r: 5
	puts area r: 5, pai: 3
	puts area pai: 3, r: 5

	# ***** コンソール *****
	# 78.5
	# 75
	# 75
	# ***** ******** ******
</code>
<h2>変数のスコープ</h2>
メソッド内とメソッド外でのデータのやり取りは原則として引数と戻り値を介してのみ行われます。<br />引数として受け取ったデータをメソッド内で書き換えても元のデータには影響を及ぼしません。<br /><br />これは、メソッドにはスコープ(有効範囲)があるからであると言えます。
<code class="ruby">
	def change(arg)
		arg = "after"
		puts arg
	end

	var = "before"
	change(var)

	puts var

	# ***** コンソール *****
	# after
	# before
	# ***** ******** ******
</code>
上のコードではvar変数をメソッド外で「before」を代入して宣言しています。<br />その後にchangeメソッドの引数として渡して、メソッド内で「after」に上書きしています。<br />この「after」への上書きはメソッド内でのみ有効であり、メソッド外(呼び出し元)のvar変数の中身は変更されていないことが確認できます。
<?php footer(); ?>