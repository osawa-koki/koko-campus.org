<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-03-08",
	"updated" => "2022-03-08"
);
head($obj);
?>
<h2>データ型</h2>
データ型とはデータの種類のことを言い、例えば整数型・浮動小数点数型・文字列型が該当します。<br />rubyは変数の宣言時にデータ型は指定する必要がなく、データ型が推論されますが、データ型についての知識はプログラミングする上では必要不可欠です。<br />rubyではデータ型の代わりにオブジェクトという名称が用いられることもありますが、ここでは一般的な名称であるデータ型という名称を使用します。<br /><br />データ型には以下の種類があります。
<ul>
	<li>数値型</li>
	<li>文字列型</li>
	<li>配列型</li>
	<li>ハッシュ型</li>
</ul>
<h3>数値型</h3>
整数型と浮動小数点数型をまとめたデータ型です。<br />「10」「-25」「99.9」と数字をそのまま書きます。<br /><br />数値型のデータに関しては算術演算が可能です。
<p>算術演算については後ほど説明します。</p>
<h3>文字列型</h3>
ひとつの、ないしは複数の文字の集合を言います。<br />「'(シングルクォーテーション)」ないしは「"(ダブルクォーテーション)」で囲んで表記します。<br />「"りんご"」「'パイナップル'」と言った感じです。<br /><br />「"(ダブルクォーテーション)」を用いて表記した場合は「#{...}」を用いた式展開が可能です。
<code class="ruby">
	puts "1+1の結果は#{1+1}です。"

	# ***** コンソール *****
	# 1+1の結果は2です。
	# ***** ******** ******
</code>
一般的には文字列の中に変数を埋め込む際に使用します。
<code class="ruby">
	rb = "ruby"
	puts "hello #{rb} !!"

	# ***** コンソール *****
	# hello ruby !!
	# ***** ******** ******
</code>
<h3>配列型</h3>
複数のデータをまとめて格納するデータ型です。<br />配列に格納される各データは要素と呼ばれます。<br />他の言語では配列内の要素は同一のデータ型である必要がありますが、rubyでは異なるデータ型の要素を持つことができます。
<p>もっとも配列型という性質上、異なるデータ型の要素を持つ配列を作成することは少ないです、、、</p>
配列は「[]」を用いて作成し、各要素は「,(カンマ)」で区切ります。
<code class="ruby">
	lang = [
		"ruby",
		"perl",
		"haskell",
		"rust",
		"c/c++"
	]
</code>
配列内の各要素は「0」から始まる番号(インデックス番号)で管理されます。<br />配列内の要素へアクセスするには以下のように書きます。
<code class="ruby">
	配列[インデックス番号]
</code>
では、作成した配列の各要素を表示してみましょう♪
<code class="ruby">
	lang = [
		"ruby",
		"perl",
		"haskell",
		"rust",
		"c/c++"
	]
	puts lang[0]
	puts lang[2]
	puts lang[4]

	# ***** コンソール *****
	# ruby
	# haskell
	# c/c++
	# ***** ******** ******
</code>
<h3>ハッシュ型</h3>
他の言語では連想配列型と呼ばれます。<br />配列型が各要素を「0」から始まるインデックス番号で管理するのに対して、ハッシュ型は独自に設定するキーと呼ばれる文字列で管理します。<br /><br />ハッシュ型のデータは以下のように定義します。
<code class="ruby">
	lang = {
		"キー1" =&gt; "バリュー1",
		"キー2" =&gt; "バリュー2",
		"キー3" =&gt; "バリュー3"
	}
</code>
配列内の各要素へアクセスするには以下のように書きます。
<code class="ruby">
	ハッシュ[キー]
</code>
では拡張子をキーとするハッシュを作成してそこからハッシュ内の各要素を表示してみましょう♪
<code class="ruby">
	lang = {
		"rb" =&gt; "ruby",
		"pl" =&gt; "perl",
		"hs" =&gt; "haskell",
		"rs" =&gt; "rust",
		"cpp" =&gt; "c/c++"
	}
	puts lang["rb"]
	puts lang["hs"]
	puts lang["cpp"]

	# ***** コンソール *****
	# ruby
	# haskell
	# c/c++
	# ***** ******** ******
</code>
<h3>真偽値型</h3>
rubyでは真偽値型というのは正確には存在しませんが、それに準ずるデータ型があるのでこれを真偽値型と呼ぶことにします。<br /><br />真偽値型とは「真(true)」と「偽(false)」の2つのいずれかをとるデータ型です。<br />通常は下で説明する比較演算や論理演算の結果、メソッドの戻り値として取得されます。<br />条件分岐で使用します。
<h2>演算</h2>
演算には以下の種類があります。
<ul>
	<li>算術演算</li>
	<li>比較演算</li>
	<li>論理演算</li>
</ul>
<h3>算術演算</h3>
足し算・引き算・掛け算・割り算です。<br />足し算と引き算についてはそれぞれ「+」と「-」を用いるのでそのままですが、掛け算と割り算は「&times;」と「&divide;」を用いないことに注意してください。
<table>
	<caption>算術演算</caption>
	<tbody>
		<tr>
			<th>+</th>
			<td>足し算です。<br />「10 + 25」は「35」、「9 + 9」は「18」となります。<br />文字列を結合する際にも用いられます。<br />「"ばなな" + "ジュース"」で「"ばななジュース"」となります。</td>
		</tr>
		<tr>
			<th>-</th>
			<td>引き算です。<br />「25 - 10」は「15」、「10 - 25」は「-15」となります。</td>
		</tr>
		<tr>
			<th>*</th>
			<td>掛け算です。<br />「5 * 2」は「10」、「-2 * 10」は「-20」となります。</td>
		</tr>
		<tr>
			<th>/</th>
			<td>割り算です。<br />「5 / 2」は「2.5」、「7 / 2」は「3.5」となります。</td>
		</tr>
		<tr>
			<th>%</th>
			<td>割り算の余りを求めます。<br />「5 % 2」は「1」、「10 % 7」は「3」となります。</td>
		</tr>
		<tr>
			<th>**</th>
			<td>べき乗を求めます。<br />「3 ** 2」は「9」、「5 ** 2」は「25」となります。</td>
		</tr>
	</tbody>
</table>
<code class="javascript">
	puts 1 + 1; #「2」と出力
	puts 1 - 5; #「-4」と出力
	puts 3 * 3; #「9」と出力
	puts 20 / 4; #「5」と出力
	puts 20 % 3; #「2」と出力
	puts 2 ** 3; #「8」と出力
</code>
<h3>比較演算</h3>
2つの値を比較して「true」ないしは「false」を返す演算です。<br />関係演算とも呼ばれます。<br />比較演算には以下の種類があります。
<table>
	<caption>関係演算</caption>
	<tbody>
		<tr>
			<th>&lt;</th>
			<td>「小なり」<br />右の数字が左の数字よりも(同じを含まない)大きければ「真」、それ以外は「偽」となります。</td>
		</tr>
		<tr>
			<th>&lt;=</th>
			<td>「小なりイコール」<br />右の数字が左の数字以上(同じを含む)であれば「真」、それ以外は「偽」となります。</td>
		</tr>
		<tr>
			<th>&gt;</th>
			<td>「大なり」<br />右の数字が左の数字よりも(同じを含まない)小さければ「真」、それ以外は「偽」となります。</td>
		</tr>
		<tr>
			<th>&gt;=</th>
			<td>「大なりイコール」<br />右の数字が左の数字以下(同じを含む)であれば「真」、それ以外は「偽」となります。</td>
		</tr>
		<tr>
			<th>==</th>
			<td>「イコール(等価演算)」<br />左と右のデータが同じであれば「真」、それ以外は「偽」となります。<br />整数型と浮動小数点数型の演算を除いてデータ型が同じである必要があります。</td>
		</tr>
		<tr>
			<th>!=</th>
			<td>「ノットイコール(等価演算)」<br />「==」の結果を反転したものです。</td>
		</tr>
	</tbody>
</table>
<code class="ruby">
	puts 1 &lt; 5; #「true」と出力
	puts 5 &lt; 1; #「false」と出力
	puts 5 &lt; 5; #「false」と出力
	puts 5 &lt;= 5; #「true」と出力
	puts 5 == 5 #「true」と出力
	puts 5 == "5"; #「false」と出力
	puts 5 != 5; #「false」と出力
	puts 5 != "5"; #「true」と出力
	puts 5 == 5.0 #「true」と出力
</code>
なんだか、ややこしいですね、、、
<h3>論理演算</h3>
「かつ」と「または」による演算です。
<table>
	<caption>論理演算</caption>
	<thead>
		<tr>
			<th>かつ</th>
			<th>または</th>
		</tr>
		<tr>
			<th>&amp;&amp;</th>
			<th>||</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>2つの条件式の両方が「真」の場合に「真」、どちらか一方でも「偽」の場合は「偽」となります。</td>
			<td>2つの条件式のいずれか一方でも「真」の場合に「真」、両方とも「偽」の場合は「偽」となります。</td>
		</tr>
	</tbody>
</table>
<code class="ruby">
	puts true && true # 「true」と出力
	puts true && false # 「false」と出力
	puts false && false # 「false」と出力
	puts true || true # 「true」と出力
	puts true || false # 「true」と出力
	puts false || false # 「false」と出力
</code>
<h2>型変換</h2>
問題です。<br />以下の3つの文を実行すると何が出力されるでしょうか???
<code class="ruby">
	puts 2 + 5
	puts "2" + "5"
	puts "2" + 5
</code>
正解は以下の通りです。
<code class="ruby">
	puts 2 + 5
	puts "2" + "5"
	puts "2" + 5

	# ***** コンソール *****
	# 7
	# 25
	# in `+': no implicit conversion of Integer into String (TypeError)
	# ***** ******** ******
</code>
「2 + 5」は普通に整数同士の足し算であるため「7」となります。<br /><br />「"2" + "5"」は文字列の結合であるため「25」となります。<br /><br />「"2" + 5」は整数と文字列の演算でありデータ型が異なるため、演算が不可能です。<br />したがって、エラーとなります。
<div class="separator"></div>
では、データ型を明示的に変換する方法を学びましょう♪
<ul>
	<li>整数型へ変換</li>
	<li>浮動小数点数型へ変換</li>
	<li>文字列型へ変換</li>
</ul>
<h3>整数型へ変換</h3>
「to_i」メソッドを使用します。<br />後ほど詳しく説明しますが、メソッドとはあるデータに対して行う処理だと思ってください。
<code class="ruby">
	データ.to_i
</code>
「i」はinteger(整数)のiです。<br /><br />これで、データを整数に変換したものが取得できます。
<code class="ruby">
	s = "2"
	i = 5
	puts s.to_i + i

	# ***** コンソール *****
	# 7
	# ***** ******** ******
</code>
浮動小数点数型のデータに対して使用した場合は小数点数以下が切り捨てられます。
<code class="ruby">
	f = 2.5
	i = 5
	puts f.to_i + i

	# ***** コンソール *****
	# 7
	# ***** ******** ******
</code>
<h3>浮動小数点数型へ変換</h3>
「to_f」メソッドを使用します。
<code class="ruby">
	データ.to_f
</code>
「f」はfloat(小数)のfです。<br /><br />これで、データを小数に変換したものが取得できます。
<code class="ruby">
	s = "2.5"
	i = 5
	puts s.to_f + i

	# ***** コンソール *****
	# 7.5
	# ***** ******** ******
</code>
<h3>文字列型へ変換</h3>
「to_s」メソッドを使用します。
<code class="ruby">
	データ.to_s
</code>
「s」はstring(文字列)のsです。<br /><br />これで、データを文字列に変換したものが取得できます。
<code class="ruby">
	i = 2
	s = "5"
	puts i.to_s + s

	# ***** コンソール *****
	# 25
	# ***** ******** ******
</code>
<?php footer(); ?>