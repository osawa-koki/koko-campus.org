<?php
require(__DIR__. "/../../framework/ver2/common.php");
$obj = array(
	"made" => "2021-11-22",
	"updated" => "2021-11-22"
);
head($obj);
?>
<h2>データの型とは</h2>
データには「どんなタイプのデータか」を示す型というものがあります。<br />例えば「10」は整数型で、「あ」は文字型で、「りんご」は文字列型<sup>*1</sup>で、「10.5」は小数点型などです。<br /><br />新しい言語では、この型に関してはコンパイラが自動で解釈してくれる場合が多いのですが、c言語ではプログラマが明示的に型について書く必要があります。<br /><br />変数を宣言する際にデータの型を宣言します。
<br /><br />
<p class="r">*1: 正確にはc言語では「文字列型」というデータの型は存在せず、代わりに「文字型」の配列として保存しますが、簡単のため文字列型として扱います。</p>
<br />
では良く用いるデータの型を紹介します。
<br /><br />
<table class="exp">
	<caption>データの型の説明</caption>
	<tbody>
		<tr>
			<th>int</th>
			<td>2バイトまたは4バイトの整数を格納する型です。<br />マイナスもok!です。</td>
		</tr>
		<tr>
			<th>char</th>
			<td>1バイト文字を1文字を格納します。<br />文字列(複数の文字)を格納する際には、この文字型の配列(後述)として保存します。</td>
		</tr>
		<tr>
			<th>short</th>
			<td>2バイトの符号付整数を格納します。</td>
		</tr>
		<tr>
			<th>long</th>
			<td>4バイトの符号付整数を格納します。</td>
		</tr>
		<tr>
			<th>float</th>
			<td>4バイトの単精度浮動小数点実数を格納します。</td>
		</tr>
		<tr>
			<th>double</th>
			<td>8バイトの倍精度浮動小数点実数</td>
		</tr>
	</tbody>
</table>
<br />
次にそれぞれのデータ型の表し方について説明します。
<br /><br />
<table class="exp">
	<caption>データの型の表し方</caption>
	<tbody>
		<tr>
			<th>int</th>
			<td>普通に整数を書きます。<br />例) 「1」「-25」「999」</td>
		</tr>
		<tr>
			<th>char</th>
			<td>「'(シングルクォーテーション)」で囲んで表現します。<br />文字列を表すためには「"(ダブルクォーテーション)」で囲みます。<br />例)「'あ'」「'x'」「"あいう"」</td>
		</tr>
		<tr>
			<th>short</th>
			<td>int型と同様。</td>
		</tr>
		<tr>
			<th>long</th>
			<td>整数の最後に「l」または「L」と書きます。<br />例)「1L」「-25l」「999L」</td>
		</tr>
		<tr>
			<th>float</th>
			<td>実数の最後に「f」または「F」と書きます。<br />例)「3.14f」「3.14F」「-1.23F」</td>
		</tr>
		<tr>
			<th>double</th>
			<td>そのまま小数を書きます。<br />例)「3.14」「1.23」「-3.14」</td>
		</tr>
	</tbody>
</table>
<p class="r">「型」の代わりに「オブジェクト」という名称が用いられることもあります。</p>
<h2>データの型のサイズ</h2>
上で説明したデータの型のうち、文字型(文字列型)を除いた「int」「short」「long」「float」「double」の5つを合わせて数字型と呼ぶことにしましょう♪
<p class="r">正確な名称ではありません。</p>
この数字型にはサイズが存在して、変数を宣言する際には格納するデータの型に合わせたサイズの領域をメモリ上に確保します。<br /><br />宣言した型よりも小さい型を扱う場合には問題ないのですが、宣言した型よりも大きな型を扱う際にはデータが溢れてしまうため要注意です。<br /><br />数値型のサイズは小さい方から「short」「int」「long」「float」「double」となります。
<img src="../pics/データ型のサイズ.png" alt="データ型のサイズの画像" />
例えば小数を扱える「double」で整数を扱うことはできますが、整数しか扱えない「int」で小数を扱うと小数点以下のデータが溢れます。
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		float x = 5;
		printf("%f", x); /*&larr;少数を表示する際には「%d」ではなく「%f」*/
		return 0;
	}
	/*「5.000000」と表示される*/
</code>
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		int x = 3.14159265;
		printf("%d", x);
		return 0;
	}
	/*「.14159265」は溢れるため、「3」と表示される*/
</code>
<br />
「大は小を兼ねる」の精神から数字型を用いる際には最大の「float」を用いてもok!なのですが、余分なメモリの消費を抑えるために必要なサイズのメモリ領域を確保するようにしましょう♪
<h2>書式文字列と型</h2>
printf関数の第一引数である書式文字列内の「%d」「%f」(変換指定)に関しては、以下の4つの情報を指定します。
<table class="x" id="shosikimojiretu">
	<tbody>
		<tr>
			<td>%</td>
			<td>0</td>
			<td>5</td>
			<td>.</td>
			<td>6</td>
			<td>f</td>
		</tr>
		<tr>
			<td>書式文字列識別子</td>
			<td>パディングフラグ</td>
			<td>最小フィールド幅</td>
			<td></td>
			<td>精度</td>
			<td>変換指定子</td>
		</tr>
	</tbody>
</table>
<table class="exp">
	<tbody>
		<tr>
			<th>変換指定識別子</th>
			<td>「%」を用いて書式文字列中の変換指定を命令します。<br />書式文字列中に文字として「%」を用いる際には「%%」と2回重ねて書きます。</td>
		</tr>
		<tr>
			<th>パディングフラグ</th>
			<td>数値の前の空白をどのように表示するかを指定します。<br />パディングフラグを書かなかった場合は空白で埋められます。</td>
		</tr>
		<tr>
			<th>最小フィールド幅</th>
			<td>表示する文字列の最小の数を指定します。<br />表示する文字列がこれに満たない場合には上で指定したパディングで埋められ、これを超す場合にはそのまま表示されます。</td>
		</tr>
		<tr>
			<th>精度</th>
			<td>表示する最小の桁数を指定します。<br />これを指定しなかった場合には整数部分は「1」、小数点以下は「6」とされます。</td>
		</tr>
		<tr>
			<th>変換指定子</th>
			<td>整数の場合は「d」、小数の場合は「f」を使用します。</td>
		</tr>
	</tbody>
</table>
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		printf("%d", 123); /*「123」と表示*/
		printf("%4d", 123); /*「 123」と表示*/
		printf("%1d", 123); /*「123」と表示*/
		printf("%04d", 123); /*「0123」と表示*/

		printf("%f", 123.12); /*「123.120000」と表示*/
		printf("%4f", 123.12); /*「123.120000」と表示*/
		printf("%.1f", 123.12); /*「123.1」と表示*/
		printf("%6.1f", 123.12); /*「 123.1」と表示*/
		printf("%2.4f", 123.12); /*「 123.1200」と表示*/
		printf("%6.4f", 123.12); /*「123.1200」と表示*/
		return 0;
	}
</code>
<?php footer(); ?>