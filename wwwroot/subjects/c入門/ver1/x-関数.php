<?php
require(__DIR__. "/../../framework/ver2/common.php");
$obj = array(
	"made" => "2022-11-22",
	"updated" => "2021-11-22"
);
head($obj);
?>
<h2>関数</h2>
関数とはある一定の処理をひとまとめにして名前を付けたもので、主な目的は関数にあるデータを与えて一定の処理をした結果を戻り値として取得することです。<br />一定の処理をコピペしても同じ結果になりますが、コードが汚くなるため原則として同じ処理が2回以上でてきたら関数化して処理をまとまるべきです。
<img src="../pics/関数.png" alt="関数の説明画像" />
<h2>関数の構造</h2>
最初に引数に半径を指定して実行すると円周(半径 &times; 2 &times; 3.14)を戻り値として返す関数(pai_r2)を紹介します。
<img src="../pics/関数の構造(プレーン).png" alt="関数の構造の説明画像" />
詳しく説明します。<br />関数は主に以下の5つのパーツからなります。
<br />
<ul>
	<li>戻り値のデータ型</li>
	<li>関数名</li>
	<li>引数</li>
	<li>関数内の処理</li>
	<li>戻り値</li>
</ul>
<img src="../pics/関数の構造.png" alt="関数の構造の説明画像" />
<h3>戻り値のデータ型</h3>
関数が返すデータの型を指定します。<br />通常の関数は引数を与えて戻り値を取得することを目的としますが、特殊な関数では戻り値を取得することを目的とせずに何らかの処理を実行することだけを目的とする場合があります。<br />ファイルにデータを書き込む関数や、コンソール画面に何かを表示する関数などが該当します。<br />こういった場合はダミーでとりあえず「int」を設定して戻り値としてなんらかの整数型のデータを返すか、戻り値のデータ型として「void」を設定します。
<p class="r">fortranなどの古い言語では引数から戻り値を以外の目的を持つ処理の集まりを「関数」と呼ばずに「サブルーチン」と呼ぶ場合もあります。</p>
<h3>関数名</h3>
関数を実行するための識別子として働く名前を設定します。<br />変数名と同様に半角英数字とアンダースコアが使用可能で、先頭に数字を使用することはできません。
<h3>引数のデータ型</h3>
引数は関数名の後に「()」内に指定します。<br />「引数のデータ型 引数名」とセットで指定します。<br />引数が複数個存在する場合には「,(カンマ)」で区切ります。<br />引数をとらない場合は「()」とするか、「(void)」とします。
<h3>関数内の処理</h3>
関数内の処理はメインの部分と同様です。<br />
<h3>戻り値</h3>
関数内での処理が終了して関数が呼び出し元に返却するデータを指定します。<br />関数内でreturn文に出会うと、関数はそこで関数から抜け出して元の処理に戻ります。
<p class="r">return文に出会わなかった場合、関数のスコープの終端である「}」に出会うと関数から抜け出して元の処理に戻ります。<br />(この場合の戻り値はありません。)</p>
<h2>関数の実行</h2>
関数は「関数名(引数)」で実行します。<br />戻り値を取得する際には「変数 = 関数名(引数)」と書きます。
<code class="c">
	double pai_r2(int r) {
		double r2, ccm;
		r2 = r * 2;
		ccm = r2 * 3.14;
		return ccm;
	}
	int main(void) {
		double i;
		i = pai_r2(10);
		printf("%f", i);
		return 0;
	}
</code>
<?php footer(); ?>