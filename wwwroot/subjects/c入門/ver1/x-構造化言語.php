<?php
require(__DIR__. "/../../framework/ver2/common.php");
$obj = array(
	"made" => "2022-11-22",
	"updated" => "2021-11-22"
);
head($obj);
?>
<h2>構造化言語</h2>
c言語以降の現代プログラミング言語は、構造化言語として以下の3つの基本性質を持ちます。
<br />
<ul>
	<li>順次実行</li>
	<li>条件分岐</li>
	<li>反復処理</li>
</ul>
<h3>順次実行</h3>
c言語以前のコードではgoto文を用いてプログラムの実行順序を記述していましたが、構造化言語ではgoto文は原則として使用しません。<br />プログラムは上に書いたコードから順に実行されます。
<h3>条件分岐</h3>
条件を満たした場合は処理Aを行い、満たさなかった場合は処理Bを行うといったようにある条件によってプログラムの実行を変更します。
<h3>反復処理</h3>
n回、ないしは、ある条件を満たす限り一定の処理を繰り返します。
<p class="r">n回に関しても、任意の数字を加算していってn回に達するまでその処理を繰り返すと捉えることができます。</p>
<div class="separator"></div>
ではそれぞれの性質について学びましょう♪
<h2>順次実行</h2>
特に説明する必要もないと思いますが、プログラムは上に書かれたコードから順に実行されます。<br />1行目のコードを実行し終えたら、2行目のコードを実行して、2行目のコードを実行し終えたら3行目のコードを実行して、、、<br />換言すれば、2行目のコードを実行する際には1行目に書かれたコードは全て実行が完了していて、3行目に書かれたコードを実行する際には2行目までに書かれたコードは全て実行が完了していると言えます。
<h2>条件分岐</h2>
「もし天気予報が雨ならば傘を持って行って、雨ではなければ傘は持って行かない」というように条件を満たす場合と満たさない場合で処理を変えます。<br />条件分岐を実行するためのコードとしてc言語では以下の2つを用います。
<br />
<ul>
	<li>if文</li>
	<li>switch文</li>
</ul>
<h3>if文</h3>
the「条件分岐」です。<br />「if (制御式/条件式) {条件を満たす場合の処理} else {条件を満たさない場合の処理}」という感じで記述します。
<code class="c">
	int main(void) {
		int x;
		scanf_s("%d", &x); /*数字を取得*/
		if (x % 2 == 0) { /*「==」を「=」としないように注意!!*/
			puts("偶数"); /*「x」を「2」で割った余りが「0」の場合の処理*/
		} else {
			puts("奇数"); /*「x」を「2」で割った余りが「0」以外の場合の処理*/
		}
		return 0;
	}
</code>
ifに続く条件式(「()」)内の式が「真(true)」である場合、ないしは、数字の場合で「0」ではない場合、続く「{}」内の処理を実行し、「()」内の式が「偽(false)」である場合、ないしは、数字に場合で「0」の場合、elseに続く「{}」内の処理を実行します。<br /><br />条件式として、数字(「0」かどうかの判定)、等価演算子(「==」「!=」)、関係演算子(「&lt;」「&gt;」「&lt;=」「&gt;=」)が使用可能です。<br /><br />また、条件式を入れ子にすることも可能です。
<code class="c">
	int main(void) {
		int x;
		scanf_s("%d", &x); /*数字を取得*/
		if (x % 2 == 0) { /*「==」を「=」としないように注意!!*/
			puts("偶数");
			if (50 &lt;= x) {
				puts("50以上");
			}
		}
		return 0;
	}
</code>
上のコードではまず入力した数字が偶数であれば「偶数」と表示し、さらに「50」以上であれば「50以上」と表示します。
<h3>switch文</h3>
if文と同様に条件分岐を実現します。<br /><br />if文を簡単に書けるというメリットがありますが、条件式の結果を整数のみを対象とする点、「break」を忘れがちな点、そこまで簡単に書けない点から特に理由がない限りは使用すべきではありません。<br />switch文は以下のように記述します。
<code class="c">
	int main(void) {
		int x;
		scanf_s("%d", &x); /*数字を取得*/
		switch (x % 3) {
			case 0:
				puts("3n");
				break;
			case 1:
				puts("3n+1");
				break;
			case 2:
				puts("3n+2");
				break;
			default:
				puts("NaN");
				break;
		}
		return 0;
	}
</code>
switchに続く条件式が、「{}」内のcaseの後の値(名札)と一致する場合、後ろの「:(コロン)」に続く処理を実行します。<br />どれにも一致しない場合は「default:」に続く処理が実行されます。<br />case内では、その処理の実行が完了したら最後に「break;」でswitch文から抜け出します。<br />「break;」を使用しないと、case内の処理の実行が完了したら次のcaseの処理に移ります。<br />例えば、「case 0:」の後の「break;」を書かないと「puts("3n")」「puts("3n+1")」の2つの文が実行されてしまいます。
<h2>反復処理</h2>
一定の処理をある条件を満たす限り継続して行います。<br />反復処理を実現するコードには以下の3つがあります。
<br />
<ul>
	<li>for</li>
	<li>while</li>
	<li>do~while</li>
</ul>
<h3>for</h3>
「for (式1; 式2; 式3) {反復処理}」と書きます。<br />式1では反復処理実行前に1度だけ実行される前処理を記載します。<br />式2では反復処理を実行するかの判定条件を記載します。<br />式3では各反復処理の実行後に実行される後処理を記載します。
<code class="c">
	int main(void) {
		int x, i;
		scanf_s("%d", &x);
		for (i = 1; i <= x; i++) {
			if (x % i == 0) {
				printf("%d\n", i);
			}
		}
		return 0;
	}
</code>
このコードは入力した数字に対して全ての約数を表示します。<br />コードについて説明します。<br /><br />「for」に続く括弧内では「前処理」「判定条件」「後処理」の3つを記載しています。<br />前処理として、反復処理を開始する前に一度だけ「i」に「1」を代入します。<br />判定条件として、「i」が「x」以下である限りは反復処理を継続します。<br />反復処理が一回終了するたびに「i」に「1」を加算します。<br />これは「i = i + 1」を簡単に記述したもので、インクリメント記法と呼ばれます。
<h3>while</h3>
「while (判定条件) {反復処理}」と書きます。<br />こちらは「for」と異なり、前処理・後処理が存在しないため、whileの前と反復処理文の最後にそれぞれこれに準ずる処理を自分で書く必要があります。<br />先ほどの入力した数字に関する全ての約数を返すコードはwhileを用いると以下のコードとなります。
<code class="c">
	int main(void) {
		int x, i;
		scanf_s("%d", &x);
		i = 1;
		while (i <= x) {
			if (x % i == 0) {
				printf("%d\n", i);
			}
			i++;
		}
		return 0;
	}
</code>
<h3>do~while</h3>
whileが先に条件式を評価して、それを満たす限り反復処理を繰り返すのに対して、do~whileは先に反復処理を1回実行してから条件式を評価してそれを満たす限りは反復処理を継続します。<br />forないしはwhileで完全に代用可能である為、原則として用いられません。
<?php footer(); ?>