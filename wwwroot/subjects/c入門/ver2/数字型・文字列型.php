<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-01-04",
	"updated" => "2022-01-04"
);
head($obj);
?>
<h2>数字型・文字列型</h2>
コンピュータは昔は電子計算機と呼ばれたように、当初は科学演算目的で開発されました。<br />そのため、古いプログラミング言語であるB言語やFortranでは科学演算処理(数字の演算)は得意としていましたが、文字列の処理は得意としていませんでした。<br />C言語は文字列の処理の需要に対応して、科学演算処理(数字の演算)に加えて文字列の処理も容易にできるように開発されました。<br /><br />ということで、C言語の最大の魅力である数字型・文字列型をマスターしましょう♪
<h2>符号</h2>
あるデータ型が10個の数字を表すことができると仮定した場合、その数字は「0, 1, 2, 3, 4, 5, 6, 7, 8, 9」ないしは「-5, -4, -3, -2, -1, 0, 1, 2, 3, 4」のいずれかになります。<br />マイナスを表すかどうかで表すことができる数字が変わります。<br />そこでc言語では明示的にそのどちらを採用するかを指定することができます。<br />マイナスを含まない(0と正の整数だけを表す)場合は「符号なし整数型」、マイナスを含む場合は「符号付き整数型」を使用します。
<h3>符号なし整数型</h3>
上の例において、「-5, -4, -3, -2, -1, 0, 1, 2, 3, 4」を表す場合です。<br />変数を宣言する際に変数の前に「unsigned」という型修飾子を付けます。
<ul>
	<li>unsigned char</li>
	<li>unsigned short</li>
	<li>unsigned int</li>
	<li>unsigned long</li>
</ul>
<h3>符号付き整数型</h3>
上の例において、「0, 1, 2, 3, 4, 5, 6, 7, 8, 9」を表す場合です。<br />変数を宣言する際に変数の前に「signed」という型修飾子を付けます。
<ul>
	<li>signed char</li>
	<li>signed short</li>
	<li>signed int</li>
	<li>signed long</li>
</ul>
「singed」は「char」型を除いて省略可能です。
<p class="r">「char」型の符号については下で説明します。</p>
<div class="separator"></div>
「char」型以外で符号を指定しないと「signed」が採用されますが、「char」型では符号を指定しない場合は「singed」型になるか「unsigned」型になるかは処理系に依存します。<br />どちらで処理されるかは以下のコードでチェックできます。
<code class="c">
	#include &lt;stdio.h&gt;
	#include &lt;limits.h&gt;

	int main(void) {
		printf("%d", CHAR_MIN);
	}
</code>
「char」型に関するデフォルトの符号が設定されているファイルは「limits.h」に格納されているため、これをインクルードします。<br />上のコードを実行して「0」が表示された場合は「singed」型、「0」以外(おそらく「-128」)が表示された場合は「unsinged」型です。
<h2>ビット</h2>
コンピュータで扱われるデータは全て「0」か「1」で表されます。<br />「0」か「1」ひとつをビットと呼び、このビットを複数個並べることで様々なデータを表現します。<br />しかしながら、ビットで管理すると単位が小さすぎて処理が煩雑になるケースが多いので、通常は8ビットを1バイトとして処理します。<br />また、「char」型のデータが記憶域上に占有する量が通常は1バイトです。
<p class="r">正確には処理系に依存するので以下のコードで確認してください。</p>
<code class="c">
	#include &lt;stdio.h&gt;
	#include &lt;limits.h&gt;

	int main(void) {
		printf("%d", CHAR_BIT);
	}
</code>
<h3>sizeof演算子</h3>
c言語では「char」型のデータが占有する大きさ(1バイト)を基準として他のデータのサーズを示します。<br />データの大きさを測るには「sizeof」演算子を使用します。<br />「sizeof (対象データ)」で実行します。<br />以下のコードを実行してみましょう♪
<code class="c">
	int main(void) {
		printf("%d\n", sizeof (char)); /*「1」*/
		printf("%d\n", sizeof (short)); /*「2」*/
		printf("%d\n", sizeof (int)); /*「4」*/
		printf("%d\n", sizeof (long)); /*「4」*/
		printf("%d\n", sizeof (unsigned short)); /*「2」*/
		printf("%d\n", sizeof (unsigned int)); /*「4」*/
		printf("%d\n", sizeof (unsigned long)); /*「4」*/
	}
</code>
各データの「char」型と比べた際の大きさが表示されます。<br />「char」型のサイズが「1」になっていることを確認してください。<br />それ以外は処理系に依存しますが、必ず「short &#8806; int &#8806; long」が成立します。
<h3>配列の要素数の算出</h3>
「sizeof」演算子を用いれば配列の要素の数を算出することができます。<br />具体的には配列全体のサイズを配列の要素1つのサイズで割れば、その答えが配列の要素の数になります。
<code class="c">
	int main(void) {
		int ary[7] = {1, 10, 100, 1000, 10000, 100000, 10000000};
		printf("%d", sizeof(ary) / sizeof(ary[0])); /*「7」*/
	}
</code>
<h2>整数定数</h2>
今まで数字を扱う際には我々が現実世界で用いる10進数を採用していましたが、コンピュータの世界では8進数ないしは16進数を用いた方がいい場合があります。<br />ということで8進数と16進数の表現方法を学びましょう♪
<h3>10進数</h3>
これは特に説明する必要はないと思いますが、、、<br />「1」「10」「25」「999」というように普通に数字を書けばok!です。<br />printf関数で表表示する際には「%d」を使用します。
<h3>8進数</h3>
10進数と区別するために数字の先頭に「0」を付けて表現します。<br />「01」「010」「025」という感じで表記します。<br />8進数であるため、当然「8」「9」は使用できません。<br />printf関数で表示する際には「%o」を使用します。
<h3>16進数</h3>
先頭に「0x」を付けて表記します。<br />使用できる数字は「0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F」までです。<br />「0x1F」「0xAA」「0xAF」という感じで表記します。<br />printf関数で表示する際には「%x」を使用します。
<div class="separator"></div>
以下のコードは10進数で入力した数字を10進数、8進数、16進数で表示します。<br />例えば「255」と入力すると「255」「377」「ff」と表示されます。
<code class="c">
	int main(void) {
		int n;
		scanf_s("%d", &n);
		printf("10進数: %d\n", n);
		printf(" 8進数: %o\n", n);
		printf("16進数: %x\n", n);
	}
</code>
<h2>文字列型</h2>
c言語で文字を表すためには「char」型が用いられましたよね♪<br />ですけど、「char」型はあくまでも1文字だけを格納できるのであって複数の文字からなる文字列を格納できません。<br />c言語では文字列型を文字型の配列として格納する必要があります。<br />但し、「char」型の配列と区別するために文字列型を扱う際には配列の最後にナル文字を格納します。<br />そのため、配列の要素の数は文字の数に「1」を加算した数となります。<br />例えば「ABCDE」という文字列を「str」という変数に格納するためには以下のコードを実行する必要があります。
<code class="c">
	int main(void) {
		char str[6] = {'A', 'B', 'C', 'D', 'E', '\0'}; /*最後にはナル文字('\0')を追加*/
		printf("%s", str);
	}
</code>
なんだか面倒くさいですね、、、<br />「"(ダブルクォーテーション)」で囲めば文字列型を表記することができるのでこれを用いてもっと簡単に書きましょう♪
<code class="c">
	int main(void) {
		char str[6] = "ABCDE";
		printf("%s", str);
	}
</code>
説明した通り、文字列は文字型の配列ですのでforループを用いて各文字を取り出すこともできます。<br />printf関数で文字を表示するには「%c」を使用します。
<code class="c">
	int main(void) {
		char str[6] = "ABCDE";
		printf("%c", str);
	}
</code>
<div class="separator"></div>
「char」型は半角1文字を格納するのでひらがな・カタカナ・漢字などの全角文字を格納できません。<br />「"(ダブルクォーテーション)」で囲んだ方法なら使用できますが、原則として用いるべきではありません。<br />また、半角英数字以外の文字記号(ひらがな・カタカナ・漢字)は全角であり、半角の倍のスペースを要します。<br />例えば「ピカチュウ」という文字を格納するには「5文字&times;2(全角)+1(ナル文字)」の配列の要素を確保する必要があります。
<code class="c">
	int main(void) {
		char str[11] = "ぴかちゅう";
		int i;
		for (i = 0; i < 12; i++) {
			printf("%c", str[i]);
		}
	}
</code>
<?php footer(); ?>