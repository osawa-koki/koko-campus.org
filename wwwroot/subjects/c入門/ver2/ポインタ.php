<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-01-04",
	"updated" => "2022-01-04"
);
head($obj);
?>
<h2>ポインタ</h2>
c言語における最大の難関です。<br />c言語でつまずく人の90%以上がこのポインタで挫折していると勝手に思っています。<br />では本題に、ポインタとはプログラムを動かす際に使用される変数(オブジェクト)に関して、メモリ上での変数(オブジェクト)の位置(アドレス)を指す識別子です。
<img src="../pics/ポインタ.png" alt="ポインタの説明画像" />
<h2>アドレス演算子</h2>
「&amp;」を変数の前に置くことでその変数(オブジェクト)のアドレス(アドレスの先頭)を取得することができます。<br />printf関数でアドレスを表示するためには「%p」を使用します。
<code class="c">
	int main(void) {
		int x;
		printf("%p\n", &x);
	}
</code>
アドレスは毎回異なりますが、「00000017053BF734」みたいな感じで表示されると思います。<br />この数字がアドレスと呼ばれ、メモリ上での「x」変数のデータを格納している住所となります。
<h2>間接演算子</h2>
先ほどはアドレスをprintf関数を使って表示しただけでした。<br />次はアドレスをポインタとして格納しましょう♪<br />オブジェクトへのポインタを取得するには変数の宣言時に変数名の前に「*」を付けます。
<code class="c">
	int main(void) {
		int *p, x; /*「p」は整数型へのポインタ型、「x」は整数型*/
		p = &amp;x; /*「p」の参照先を「x」へ*/
		printf("%p\n", &x); /*「x」のアドレスを表示*/
		printf("%p\n", p); /*「p」のポインタを表示*/
	}
</code>
実際にアドレスはその都度異なりますが、両者は必ず一致します。<br />これはポインタである「p」が「x」オブジェクトを指しているからで、この場合「*pはxのエイリアス(別名)である」と言います。
<h3>参照渡し</h3>
関数の授業で関数へ渡す引数は値渡しであり、関数内で引数の値を変更しても関数実行元の変数は変更されないことを説明しましたよね♪<br />引数としてポインタを用いれば、引数に渡したデータそのものを関数内で操作することができます。<br /><br />まずは、ポインタを使用しないで値渡しを行うコードです。
<code class="c">
	void change(int arg) {
		arg = 99999;
	}

	int main(void) {
		int x;
		x = 12345;
		change(x);
		printf("%d\n", x);
	}
</code>
上のコードでは「x」の値は「12345」のまま変更されません。<br />ということで、「x」に対するアドレスをchange関数に渡して、change関数内ではポインタを使用してアドレス上のデータそのものを変更しましょう♪
<code class="c">
	void change(int *arg) { /*引数のポインタを取得*/
		*arg = 99999; /*引数のアドレスのデータそのものを変更*/
	}

	int main(void) {
		int x;
		x = 12345;
		change(&x); /*「x」に対するアドレスを渡す*/
		printf("%d\n", x);
	}
</code>
「x」のデータが「99999」に変更されていると思います。<br />これが参照渡しです。
<h3>scanf関数</h3>
scanf関数でコンソール画面からユーザが入力した数字・文字を取得するには変数の前に「&amp;」を付けましたよね♪<br />なぜだか説明できますか???<br /><br />scanf関数が引数として受け取った値をユーザが入力した数字・文字に変更しても何の意味もありませんよね、、、<br />アドレスを渡してそのアドレス上のデータを変更しないと意味ないため、scanf関数では「&amp;」を引数の前に付けてそのアドレスを渡しています。
<h2>配列のポインタ</h2>
配列とは同一型のデータを複数個集めたもので、当然要素はメモリ上に並べて確保されます。<br />そのため、配列を効果的に操作する際にはポインタの理解が必要不可欠です。<br />まず第一に配列そのものに対するポインタはその配列の先頭の要素へのポインタとなります。
<code class="c">
	int main(void) {
		int x[5], i;
		printf("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配列全体のアドレス: %p\n", &x);
		for (i = 0; i < 5; i++) {
			printf("配列の%iつ目の要素のアドレス: %p\n", i + 1, &x[i]);
		}
	}
</code>
<img src="../pics/配列のポインタ.png" alt="配列のポインタの説明画像" />
配列全体のアドレスが配列の先頭の要素へのアドレスとなっていることを確認してください。
<h3>各要素へのポインタ</h3>
「p」が配列中の要素「e」を指す場合、「p + 1」は「e」の次の要素を指し、「p - 1」は「e」の前の要素を指します。<br />本当にそうなっているかどうか確認してみましょう♪
<code class="c">
	int main(void) {
		int ary[5] = { 1, 2, 3, 4, 5 };
		int *p = ary;
		int i;
		for (i = 0; i < 5; i++) {
			printf("ary[%i]のポインタは{%p}{%p}\n", i, &amp;ary[i], p + i);
		}
	}
</code>
<img src="../pics/配列-ポインタ.png" alt="配列のポインタ" />
「p + 1」が「&amp;ary[i]」と同じポインタであることが確認できました。<br /><br />もっと先へ進みましょう♪<br />配列のエイリアスである「p」が要素「e」を指すとき、要素「e」i個分後の要素を表す「*(p + i)」は「p[i]」と表記でき、要素「e」i個分前の要素を表す「*(p - i)」は「p[-i]」と表記できます。<br />これで、ポインタの4つの表記ができるようになりましたね♪
<img src="../pics/ポインタ表記.png" alt="ポインタの表記" />
では本当に4つの表記が同じかどうかチェックしてみましょう♪
<code class="c">
	int main(void) {
		int ary[5] = { 1, 2, 3, 4, 5 };
		int *p = ary;
		int i;
		for (i = 0; i < 5; i++) {
			printf("%p --- (&amp;ary[i])\n", &amp;ary[i]);
			printf("%p --- (ary + i)\n", ary + i);
			printf("%p --- (&amp;p[i])\n", &amp;p[i]);
			printf("%p --- (p + i)\n", p + i);
			printf("\n\n");
		}
	}
</code>
<img src="../pics/ポインタ表記-確認.png" alt="4種類のポインタ表記" />
<h2>ポインタを用いた文字列の表記</h2>
文字列は配列であるため、書き換えが不可能であるなどの制約が存在します。<br />これに対して、ポインタを用いて配列を表記することでこの問題を克服することができます。
<h3>通常の文字列表記</h3>
まずは通常の文字列の表記を試してみましょう♪
<code class="c">
	int main(void) {
		char str[] = "ABC";
		printf("%s", p_str);
	}
	/* &darr; コンソール &darr;
	ABC
	*/
</code>
これは当然ですね♪<br />文字列は文字型のデータの配列ですのでこれを書き換えるとエラーとなります。
<code class="c">
	int main(void) {
		char str[] = "ABC";
		str = "DEF";
		printf("%s", p_str);
	}
	/* &darr; コンソール &darr;
	エラー
	*/
</code>
<h3>ポインタによる文字列表記</h3>
では今度はポインタを用いて文字列を表記してみましょう♪<br />書き方は通常のポインタと同様です。
<code class="c">
	int main(void) {
		char *p_str = "ABC";
		printf("%s", p_str);
	}
	/* &darr; コンソール &darr;
	ABC
	*/
</code>
p_strは文字列「ABC」のポインタ(エイリアス)であるため、これを書き換えることもできます。
<code class="c">
	int main(void) {
		char *p_str = "ABC";
		p_str = "DEF";
		printf("%s", p_str);
	}
	/* &darr; コンソール &darr;
	DEF
	*/
</code>
これは実際にABCがDEFに書き換えられたのではなく、DEFを格納する領域が新たに生成されて、p_strの指す先がDEFを格納するアドレスに変化しただけです。
<img src="../pics/文字列のポインタ.png" alt="文字列のポインタ" />
p_strの指す先がABCからDEFに変わったため、ABCはどこからもアクセスされないゴミ(ガベージ)となりました。<br />これに関してはガベージコレクションをすることで、不要なメモリ領域を解放する必要があります。
<div class="separator"></div>
ポインタによって表記された文字列も配列であるため、pがある要素を指すと仮定した場合、p + iはある要素の次のi個分後の要素を指します。<br />ではこの性質を利用して受け取った文字列を一文字ずつ表示する関数を作成しましょう♪
<code class="c">
	void print_one_by_one(const char *str) {
		while (*str) { /*文字列がnullでない限り*/
			printf("%c\n", *str); /*文字列内の一文字を表示*/
			*str++; /*ポインタを次の要素へ*/
		}
	}

	int main(void) {
		char *str = "ABCDEF";
		print_one_by_one(str);
	}
	/* &darr; コンソール &darr;
	A
	B
	C
	D
	E
	F
	*/
</code>
<?php footer(); ?>