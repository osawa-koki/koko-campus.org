<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-01-04",
	"updated" => "2022-01-04"
);
head($obj);
?>
<h2>c言語基礎</h2>
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		printf("hello world!");
		return 0;
	}
</code>
c言語プログラムのテンプレートは以下の要素からなります。
<ul>
	<li>#include &lt;stdio.h&gt;</li>
	<li>int</li>
	<li>main</li>
	<li>(void)</li>
	<li>{...}</li>
	<li>return 0</li>
</ul>
<img src="../pics/main関数.png" alt="main関数" />
<h3>#include &lt;stdio.h&gt;</h3>
「#include &lt;stdio.h&gt;」では標準の入出力を扱うヘッダファイルを読み込んでいます。<br />「printf」関数を使用する際に使用します。
<h3>int</h3>
プログラムの本体となる関数であるmain関数の実行が終わったら返すデータの型が整数であることを示します。<br />小数を意味する「double」や「float」、文字列を意味する「char」でも問題ありませんが、慣例として「int」とします。
<h3>main</h3>
「main」はc言語プログラムにおいて最初に実行される関数であり、ここにメインで実行したい処理を記述します。
<h3>(void)</h3>
「(void)」は関数への引数が存在しないことを示します。<br />voidを省略して「()」と書いてもok!です。<br /><small>(引数については後述)</small>
<h3>{...}</h3>
「{...}」は関数の範囲を示します。<br />「{}」はブレースと呼び、主に複数行からなる命令文をブロックとしてまとめるために用いられます。
<h3>return 0</h3>
「return 0;」は関数の戻り値として「0」を返すことを示します。<br />mainの前に整数を示すintを置いたのでとりあえず、整数を返しておけばok!です。<br />「1」でも「999」でもok!です。
<div class="separator"></div>
実際、最初の段階ではこの内容について深く理解する必要はないです。<br />呪文のように唱えればok!です。
<h2>コメントアウト</h2>
プログラムコード中に書くメモ書きを<strong>コメントアウト</strong>と呼びます。<br /><br />コメントアウトは「/*」と「*/」で囲みます。
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) { /*良い天気だね♪*/
		printf("%s", "hello world!");
		return 0;
	}
</code>
コメントアウトは保守性(プログラムの修正のしやすさ)のためにコードの書き手がコードの読み手に書くためのものですので、伝えたいことを必要最小限で書きましょう♪<br /><br />今日の天気について書く必要はありません。
<h2>命令文</h2>
プログラムは複数の命令文の集合でできています。<br />各命令文の終わりには「;(セミコロン)」を付けます。<br /><br />最初のうちはセミコロンの付け忘れによるエラーが多いと思いますので特に注意してくださいね♪
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		printf("%s", "hello world!") /*&larr; 「;(セミコロン)」を付けていないためng*/
		printf("%s", "hello world!"); /*&larr; ok!!*/
		return 0;
	}
</code>
<h2>コンソールに表示</h2>
コンソール画面とは文字の入出力をする画面です。<br />みなさんがプログラマにどのようなイメージを抱いているか分かりませんが、いわゆるプログラマがキーボードで何か文字を打ち込んだり文字を入力させたりする黒い画面をいいます。
<img src="../pics/コンソール画面.png" alt="コンソール画面" />
こんな画面です。<br />実際にプログラムが内部でどのような処理をしているか分からないので、とりあえずこのコンソール画面に必要なデータを出力させてチェックしましょう♪<br /><br />コンソール画面に出力するための関数には主に以下の2つがあります。
<ul>
	<li>printf</li>
	<li>puts</li>
</ul>
<h3>printf</h3>
「プリントエフ」と発音します。<br /><br />「printf("書式文字列", 引数1, 引数2, 引数3, ...)」で実行します。
<p class="r">正確には書式文字列も引数なんですけどここではスルー♪</p>
<p class="r">引数については後ほど詳しく説明します。<br />関数に何かの処理をお願いするデータと捉えて下さい。<br />ここでは、出力するデータを関数に引数として渡してコンソール画面に表示してもらっています。</p>
<br /><br />最初の書式文字列とは「データをどのように表示するか」についての指示で、文字列の場合は「%s」、整数(10進数)の場合は「%d」、小数(10進数)の場合は「%f」と書きます。
<p class="r">「%s」は省略可能です。(非書式化表示)</p>
<br />
printf関数の使用例を以下にあげますね♪
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		printf("%d", 7); /*「7」という整数(%d)を表示*/
		printf("私の好きな数字は%dです。", 25); /*「私の好きな数字は25です。」と表示*/
		printf("私の好きな食べ物は%sです。", "りんご"); /*「私の好きな数字はりんごです。」と表示*/
		return 0;
	}
</code>
<p class="r">後ほど詳しく説明しますが、文字列を表すためには「"(ダブルクォーテーション)」で囲む必要があります。</p>
また、整数の演算の結果を出力することもできます。
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		printf("%d", 1 + 1);
		return 0;
	}
	/*「2」と出力される*/
</code>
改行を出力する際には「"<span class="en">\</span>n"」と書きます。<br />「<span class="en">\</span>(バックスラッシュ)」は「<span class="ja">\</span>(円マーク)」で表示される場合もあります。
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		printf("%s", "チコリータ\nピカチュウ\nエモンガ");
		return 0;
	}
	/* &darr; コンソール &darr;
	チコリータ
	ピカチュウ
	エモンガ
	*/
</code>
書式化文字列に複数の値を入れる際には、「%d」などのフォーマット指定子とそのあとの引数を複数個設定します。
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		printf("1つ目の引数は%d、2つ目の引数は%d、3つ目の引数は%dです。", 5, 10, 25);
		return 0;
	}
	/*「1つ目の引数は5、2つ目の引数は10、3つ目の引数は25です。」と出力される*/
</code>
<h4>書式文字列</h4>
printf関数の第一引数である書式文字列内の変換指定(「%d」「%f」)に関しては、「%d」「%f」のように省略することもできますが、表示の内容に関する以下の4つの情報を指定します。
<div class="scroll-600">
	<table class="x" id="shosikimojiretu">
		<tbody>
			<tr>
				<td>%</td>
				<td>0</td>
				<td>5</td>
				<td>.</td>
				<td>6</td>
				<td>f</td>
			</tr>
			<tr>
				<td>書式文字列識別子</td>
				<td>パディングフラグ</td>
				<td>最小フィールド幅</td>
				<td></td>
				<td>精度</td>
				<td>変換指定子</td>
			</tr>
		</tbody>
	</table>
</div>
<h5>変換指定識別子</h5>
「%」を用いて書式文字列中の変換指定を命令します。<br />書式文字列中に文字として「%」を用いる際には「%%」と2回重ねて書きます。
<h5>パディングフラグ</h5>
数値の前の空白をどのように表示するかを指定します。<br />パディングフラグを書かなかった場合は空白で埋められます。
<h5>最小フィールド幅</h5>
表示する文字列の最小の数を指定します。<br />表示する文字列がこれに満たない場合には上で指定したパディングで埋められ、これを超す場合にはそのまま表示されます。
<h5>精度</h5>
表示する最小の桁数を指定します。<br />これを指定しなかった場合には整数部分は「1」、小数点以下は「6」とされます。
<h5>変換指定識別子</h5>
整数の場合は「d」、小数の場合は「f」を使用します。
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		printf("%d", 123); /*「123」と表示*/
		printf("%4d", 123); /*「 123」と表示*/
		printf("%1d", 123); /*「123」と表示*/
		printf("%04d", 123); /*「0123」と表示*/

		printf("%f", 123.12); /*「123.120000」と表示*/
		printf("%4f", 123.12); /*「123.120000」と表示*/
		printf("%.1f", 123.12); /*「123.1」と表示*/
		printf("%6.1f", 123.12); /*「 123.1」と表示*/
		printf("%2.4f", 123.12); /*「 123.1200」と表示*/
		printf("%6.4f", 123.12); /*「123.1200」と表示*/
		return 0;
	}
</code>
<h3>puts</h3>
「プッツ」ではなく「プットエス」と発音します。<br />最後の「s」はstring(文字列)を意味します。<br />書式化を行わず、かつ最後に自動的に改行コード(<span class="en">\</span>n)が出力されるため、文字列を簡単に表示することが可能です。
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		puts("do you like programming???");
		puts("do you like programming???");
		puts("do you like programming???");
		return 0;
	}
	/* &darr; コンソール &darr;
	do you like programming???
	do you like programming???
	do you like programming???
	*/
</code>
<h2>コンソールから入力</h2>
「printf」と「puts」でコンソールに出力する方法は学びましたね♪<br />では今度はコンソール画面に入力されたデータを取得しましょう♪<br /><br />「scanf」を使用します。
<h3>scanf</h3>
「スキャンエフ」と発音します。<br />「scanf(書式化文字列, 取得したデータを格納する変数)」で実行します。
<p class="r">変数についてはまだ学習していません。<br />ここでは、一時的なデータを格納しているメモリ上の領域とだけ覚えてください。</p>
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		int no; /* &larr; これは一旦無視!! (noという変数を作成しています)*/
		printf("数字を入力してください。");
		scanf("%d", &no); /*noという変数の前に「&amp;」を付けます (理由はポインタの授業で学習します)*/
		printf("あなたは%dと入力しましたね♪", no); /*取得したデータの表示*/
		return 0;
	}
</code>
<img src="../pics/scanf.gif" alt="scanf関数" />
「数字を入力してください。」と表示され、何か数字を入力して「enter」を押すと「あなたは25と入力しましたね♪」と表示されます。(25と入力した場合)<br /><br />ひょっとしたらコンパイル(ビルド)時にエラーが出て「'scanf': This function or variable may be unsafe. Consider using scanf_s instead. ...」と表示されるかもしれません。<br />これは「scanf」という関数はバッファオーバーフローというハッキングに対して脆弱であるため使用が非推奨です。<br />そのため、「scanf」という関数の代わりに「scanf_s」という関数を使用してください。
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		int no; /* &larr; これは一旦無視!! (noという変数を作成しています)*/
		printf("数字を入力してください。");
		scanf_s("%d", &amp;no); /*noという変数の前に「&amp;」を付けます (理由はポインタの授業で学習します!)*/
		printf("あなたは%dと入力しましたね♪", no); /*取得したデータの表示*/
		return 0;
	}
</code>
<br />
これでコンソール画面からデータを取得して、それを組み立ててコンソール画面に表示することができるようになりましたね♪<br /><br />次は変数について学習しましょう♪
<h2>変数</h2>
プログラムの実行に関して一時的なデータを保存するために用います。<br /><br />変数に関しては以下の3つの処理を学びましょう♪
<ol>
	<li>変数の宣言</li>
	<li>変数への代入</li>
	<li>変数の取り出し</li>
</ol>
<h3>変数の宣言</h3>
言えばデータを格納する箱である変数を作成することを<strong>変数の宣言</strong>と言います。<br />具体的にはどのようなデータを保存するかを指定して、箱を作成します。<br /><br />ここでは整数を保存する箱(変数)を作成しましょう♪
<p class="r">整数以外の変数についてはデータの型の授業で説明します。</p>
整数専用の箱(変数)の作成には「int 変数名」を実行します。<br /><span class="u">変数名は英数字と「_(アンダースコア)」が使用可能で、変数名の先頭に数字は使用できません。</span><br /><br />複数宣言する際には「,(カンマ)」で区切って宣言します。
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		int x, y, x; /*「x」「y」「z」という整数用の箱(変数)を作成します*/
		return 0;
	}
</code>
<h3>変数への代入</h3>
実際に作成した箱(変数)にデータを格納してみましょう♪<br /><br />変数にデータを格納することを<strong>代入</strong>と呼びます。<br />代入には「=」を使用します。
<p class="r">「=」はプログラミングの世界では「同じ」を意味するのではなく、右の値を左の変数に代入することを意味します。</p>
では先ほど宣言した「x」「y」「z」に整数を代入してみましょう♪
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		int x, y, x; /*「x」「y」「z」という整数用の箱(変数)を作成します*/
		x = 10; /*「x」に「10」という整数を代入*/
		y = 25; /*「y」に「25」という整数を代入*/
		z = 100; /*「z」に「100」という整数を代入*/
		return 0;
	}
</code>
<br />
変数の宣言と変数への代入を同時に行うことも可能です。
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		int x = 10; /*「x」という箱(変数)を作成して、「10」という整数を代入*/
		int y = 25; /*「y」という箱(変数)を作成して、「25」という整数を代入*/
		int z = 100; /*「z」という箱(変数)を作成して、「100」という整数を代入*/
		return 0;
	}
</code>
<h3>変数の取り出し</h3>
変数名をそのまま書けば変数の中身を取り出すことができます。<br />変数を「"(ダブルクォーテーション)」ないしは「'(シングルクォーテーション)」で囲んではダメです。<br /><br />では先ほど「x」「y」「z」に代入したデータを取り出してコンソール画面に表示してみましょう♪
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		int x = 10; /*「x」という箱(変数)を作成して、「10」という整数を代入*/
		int y = 25; /*「y」という箱(変数)を作成して、「25」という整数を代入*/
		int z = 100; /*「z」という箱(変数)を作成して、「100」という整数を代入*/
		printf("変数xの中身は%d、変数yの中身は%d、変数zの中身は%dです。", x, y, z);
		return 0;
	}
	/*「変数xの中身は10、変数yの中身は25、変数zの中身は100です。」と表示される*/
</code>
変数の中身は上書きすることが可能です。
<code class="c">
	#include &lt;stdio.h&gt;

	int main(void) {
		int x = 10; /*「x」という箱(変数)を作成して、「10」という整数を代入*/
		int y = 25; /*「y」という箱(変数)を作成して、「25」という整数を代入*/
		int z = 100; /*「z」という箱(変数)を作成して、「100」という整数を代入*/
		y = 110; /*「y」の中身を「110」に上書き*/
		printf("変数xの中身は%d、変数yの中身は%d、変数zの中身は%dです。", x, y, z);
		return 0;
	}
	/*「変数xの中身は10、変数yの中身は110、変数zの中身は100です。」と表示される*/
</code>
<?php footer(); ?>