<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-01-04",
	"updated" => "2022-01-04"
);
head($obj);
?>
<h2>配列</h2>
<span class="u">同じデータ型の</span>データを複数格納するためのデータ型です。
<p class="r">他の言語では異なるデータ型・オブジェクトを格納できることもありますが、c言語では配列内の要素のデータ型は全て同一です。</p>
<img src="../pics/配列.png" alt="配列の説明画像" />
配列に格納されるデータは「要素」と呼ばれ、配列内での各要素の位置は<span class="u">「0」から始まる</span>インデックス番号で管理されます。
<h2>配列の作成</h2>
配列を作成するためには「配列の型 変数名[要素の数];」で定義します。
<code class="c">
	int main(void) {
		int ary[5]; /*整数型のデータを「5」つ格納する配列を作成*/
		return 0;
	}
</code>
<h2>配列の要素の代入</h2>
配列の各要素にデータを代入するためには「配列名[インデックス番号] = 代入するデータ」で実行します。<br />既にデータが代入されている場合はデータが上書きされます。
<code class="c">
	int main(void) {
		int ary[3];
		ary[0] = 111;
		ary[1] = 222;
		ary[2] = 333;
		return 0;
	}
</code>
<h2>配列の初期化</h2>
配列の宣言と代入を同時に行うためには初期化子「{}(ブレース)」を使用します。<br />各要素は「,(カンマ)」で区切ります。
<code class="c">
	int main(void) {
		int ary[3] = {111, 222, 333};
		return 0;
	}
</code>
初期化子内の要素の数が配列の要素の数よりも少ない場合は「0」で初期化され、初期化子内の要素の数が配列の要素の数よりも多い場合はコンパイルエラーとなります。
<code class="c">
	int main(void) {
		int ary[5] = {111, 222, 333}; /*「ary」配列には「111」「222」「333」「0」「0」が代入される*/
		return 0;
	}
</code>
<code class="c">
	int main(void) {
		int ary[2] = {111, 222, 333}; /*コンパイルエラー*/
		return 0;
	}
</code>
<h2>配列の走査</h2>
配列の要素を順にひとつずつ取り出します。<br />配列の各要素は「配列名[インデックス番号]」でアクセスできるため、forを用いて反復処理を行うことでこれを実現します。
<code class="c">
	int main(void) {
		int i;
		int ary[3] = {111, 222, 333};
		for (i = 0; i < 3; i++) {
			printf("%d\n", ary[i]);
		}
		return 0;
	}
	/* &darr; コンソール &darr;
	「111」
	「222」
	「333」
	と出力
	*/
</code>
<h2>配列のコピー</h2>
配列をコピーするのに「=」は使用できません。<br />コンパイルエラーとなります。<br />配列をコピーするにはコピー元の配列の要素をforループでひとつずつ取り出してコピー先の配列の各要素に代入する必要があります。
<code class="c">
	int main(void) {
		int i;
		int ary[3] = {111, 222, 333};
		int copied[3];
		for (i = 0; i < 3; i++) {
			copied[i] = ary[i];
		}
		return 0;
	}
</code>
<h2>多次元配列</h2>
配列はその要素に配列を入れることも可能です。<br />配列内の要素である配列内の要素を指定するには「ary[1][2]」のように、最初に配列内の要素である配列を指定して、さらにその配列内の要素を指定します。<br />配列に配列を入れた場合は「二次元配列」、さらにその配列の要素に配列を入れた場合は「三次元配列」と何回でも入れ子にすることも可能です。
<img src="../pics/多次元配列.png" alt="多次元配列の説明画像" />
では、掛け算九九の結果を多次元配列に格納して、その結果を出力してみましょう♪
<code class="c">
	int main(void) {
		int kuku[9][9], i, j;
		for (i = 0; i < 9; i++) {
			for (j = 0; j < 9; j++) {
				kuku[i][j] = (i + 1) * (j + 1);
			}
		}
		for (i = 0; i < 9; i++) {
			for (j = 0; j < 9; j++) {
				printf("%3d", kuku[i][j]);
			}
			puts("");
		}
		return 0;
	}
</code>
配列の要素を指定するインデックス番号が「0」から始まるのに対して、掛け算九九は「1」から始まるため、若干の修正が必要なことに注意してください。
<?php footer(); ?>