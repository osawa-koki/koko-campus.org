<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-01-04",
	"updated" => "2022-01-04"
);
head($obj);
?>
<h2>構造化言語</h2>
c言語以降の現代プログラミング言語は、構造化言語として以下の3つの基本性質を持ちます。
<ul>
	<li>順次実行</li>
	<li>条件分岐</li>
	<li>反復処理</li>
</ul>
<h3>順次実行</h3>
c言語以前のコードではgoto文を用いてプログラムの実行順序を記述していましたが、構造化言語ではgoto文は原則として使用しません。<br />プログラムは上に書いたコードから順に実行されます。
<h3>条件分岐</h3>
条件を満たした場合は処理Aを行い、満たさなかった場合は処理Bを行うといったようにある条件を満たすかどうかによって実行する処理を変更します。
<h3>反復処理</h3>
ある一定の処理を条件を満たす限り繰り返して実行し続けます。<br />ループ処理とも呼びます。
<div class="separator"></div>
ではそれぞれの性質について学びましょう♪
<h2>順次実行</h2>
特に説明する必要もないと思いますが、プログラムは上に書かれたコードから順に実行されます。<br />1行目のコードを実行し終えたら、2行目のコードを実行して、2行目のコードを実行し終えたら3行目のコードを実行して、、、<br />換言すれば、2行目のコードを実行する際には1行目に書かれたコードは全て実行が完了していて、3行目に書かれたコードを実行する際には2行目までに書かれたコードは全て実行が完了していると言えます。
<h2>条件分岐</h2>
「もし天気予報が雨ならば傘を持って行って、雨ではなければ傘は持って行かない」というように条件を満たす場合と満たさない場合で処理を変えます。<br />条件分岐を実行するためのコードとしてc言語では以下の2つを用います。
<ul>
	<li>if文</li>
	<li>switch文</li>
</ul>
<h3>if文</h3>
the「条件分岐」です。<br />「if (制御式/条件式) {条件を満たす場合の処理} else {条件を満たさない場合の処理}」という感じで記述します。
<code class="c">
	int main(void) {
		int x;
		scanf_s("%d", &amp;x); /*数字を取得*/
		if (x % 2 == 0) { /*「==」を「=」としないように注意!!*/
			puts("偶数"); /*「x」を「2」で割った余りが「0」の場合の処理*/
		} else {
			puts("奇数"); /*「x」を「2」で割った余りが「0」以外の場合の処理*/
		}
		return 0;
	}
</code>
python・javascript・phpなどの新しい言語では「真(true)」と「偽(false)」をメインに条件を設定すると思いますが、c言語では「真(0以外/非0)」と「偽(0)」で条件を設定します。ifに続く条件式(「()」)内の式が「真(true)」である場合、言い換えれば、「0」ではない場合、続く「{}」内の処理を実行し、「()」内の式が「偽(false)」である場合、言い換えれば、「0」の場合、elseに続く「{}」内の処理を実行します。<br /><br />条件式として、等価演算子(「==」「!=」)、関係演算子(「&lt;」「&gt;」「&lt;=」「&gt;=」)が使用可能です。<br /><br />また、条件式を入れ子にすることも可能です。
<code class="c">
	int main(void) {
		int x;
		scanf_s("%d", &amp;x); /*数字を取得*/
		if (x % 2 == 0) { /*「==」を「=」としないように注意!!*/
			puts("偶数");
			if (50 &lt;= x) {
				puts("50以上");
			}
		}
		return 0;
	}
</code>
上のコードではまず入力した数字が偶数であれば「偶数」と表示し、さらに「50」以上であれば「50以上」と表示します。
<p class="r">制御式を(x % 2)として、真の場合に「puts("奇数")」、偽の場合に「puts("偶数")」としてもok!です。</p>
<h3>switch文</h3>
if文と同様に条件分岐を実現します。<br /><br />if文を簡単に書けるというメリットがありますが、条件式の結果を整数のみを対象とする点、「break;」を忘れがちな点、そこまで簡単に書けない点から特に理由がない限りは使用すべきではありません。<br />switch文は以下のように記述します。
<code class="c">
	int main(void) {
		int x;
		scanf_s("%d", &amp;x); /*数字を取得*/
		switch (x % 3) { /*「x」を「3」で割った余りが、、、*/
			case 0: /*「0」の場合の処理*/
				puts("3n");
				break;
			case 1: /*「1」の場合の処理*/
				puts("3n+1");
				break;
			case 2: /*「2」の場合の処理*/
				puts("3n+2");
				break;
			default: /*それ以外(数字以外が入力された場合)*/
				puts("NaN");
				break;
		}
		return 0;
	}
</code>
switchに続く条件式が、「{}」内のcaseの後の値(名札)と一致する場合、後ろの「:(コロン)」に続く処理を実行します。<br />どれにも一致しない場合は「default:」に続く処理が実行されます。<br />case内では、その処理の実行が完了したら最後に「break;」でswitch文から抜け出します。<br />「break;」を使用しないと、case内の処理の実行が完了したら次のcaseの処理に移ります。<br />例えば、「case 0:」の後の「break;」を書かないと「puts("3n")」「puts("3n+1")」の2つの文が実行されてしまいます。
<div class="separator"></div>
<h3>三項演算子</h3>
条件分岐を学んだので、ここで特殊な演算子である三項演算子について説明しますね♪<br /><br />三項演算子は使用する式の値を条件式で変更する場合に用いられます。<br />「(条件式) ? 真の場合に使用するデータ : 偽の場合に使用するデータ」と書きます。<br />if文を用いてもok!ですが、三項演算子を用いるととってもスッキリと書けます。<br />例えば、入力した2つのデータのうち、大きい方のデータを返すc言語プログラムを三項演算子を用いずにif文を用いて書くと以下のコードになります。
<code class="c">
	int main(void) {
		int x, y;
		scanf_s("%d%d", &amp;x, &amp;y); /*数字を取得*/
		if (y &lt; x) {
			printf("%d", x);
		} else {
			printf("%d", y);
		}
	}
</code>
これを三項演算子を用いて書くと以下のようになります。
<code class="c">
	int main(void) {
		int x, y;
		scanf_s("%d%d", &amp;x, &amp;y); /*数字を取得*/
		printf("%d", (y &lt; x) ? x : y);
	}
</code>
とってもスッキリしますね♪
<h2>反復処理</h2>
ループ処理とも言います。<br />一定の処理をある条件を満たす限り継続して行います。<br />反復処理を実現するコードには以下の3つがあります。
<ul>
	<li>for</li>
	<li>while</li>
	<li>do~while</li>
</ul>
<h3>for</h3>
「for (前処理; 制御式; 間処理) {反復処理}」と書きます。
<h4>前処理</h4>
前処理では反復処理実行前に1度だけ実行される前処理を記載します。<br />通常は「i」(数字をカウントアップする変数)に「1」を代入します。
<h4>制御式</h4>
制御式では反復処理を実行するかの判定条件を書きます。<br />通常は「i &lt;= ループ処理の回数」とします。
<h4>間処理</h4>
ループ処理が一度終了する度に実行されます。<br />通常は「i」を「1」加算します。<br />「i++」と書いていますが(インクリメント記法)、これは「i = i + 1」と同じです。
<div class="separator"></div>
具体的には以下のようになります。
<code class="c">
	int main(void) {
		int x, i;
		scanf_s("%d", &x);
		for (i = 1; i &lt;= x; i++) {
			if (x % i == 0) {
				printf("%d\n", i);
			}
		}
		return 0;
	}
</code>
このコードは入力した数字に対して全ての約数を表示します。
<h3>while</h3>
「while (判定条件) {反復処理}」と書きます。<br />こちらは「for」と異なり、前処理・後処理が存在しないため、whileの前と反復処理文の最後にそれぞれこれに準ずる処理を自分で書く必要があります。<br />先ほどの入力した数字に関する全ての約数を返すコードはwhileを用いると以下のコードとなります。
<code class="c">
	int main(void) {
		int x, i;
		scanf_s("%d", &x);
		i = 1;
		while (i &lt;= x) {
			if (x % i == 0) {
				printf("%d\n", i);
			}
			i++;
		}
		return 0;
	}
</code>
<h3>do~while</h3>
whileが先に条件式を評価して、それを満たす限り反復処理を繰り返すのに対して、do~whileは先に反復処理を1回実行してから条件式を評価してそれを満たす限りは反復処理を継続します。<br />forないしはwhileで完全に代用可能である為、原則として用いられません。<br />先ほどの入力した数字の全ての約数を表示するコードは以下のようになります。
<code class="c">
	int main(void) {
		int x, i;
		scanf_s("%d", &x);
		i = 1;
		do {
			if (x % i == 0) {
				printf("%d\n", i);
			}
			i++;
		} while (i &lt;= 0);
		return 0;
	}
</code>
<h2>多重ループ</h2>
反復処理は入れ子にして書くこともできます。<br />この場合は、外のループを一度実行するたびに中のループが全て実行されるため、「外のループの回数 &times; 中のループの回数」分の処理が実行されます。<br />多重ループを実行するコードを紹介します。
<code class="c">
	int main(void) {
		int i, j;
		i = 1;
		for (i = 1; i &lt;= 9; i++) {
			for (j = 1; j &lt;= 9; j++) {
				printf("%3d", i * j); /*マス目を揃えるためにパディングを「3」に指定*/
			}
			puts(""); /*中のループが一度終了するたびに改行*/
		}
		return 0;
	}
</code>
<img id="kakezan-kuku" src="../pics/九九.png" alt="多重ループの説明画像" />
<?php footer(); ?>