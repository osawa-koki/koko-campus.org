<?php
require(__DIR__. "/../../framework/ver3/common.php");
$obj = array(
	"made" => "2022-01-10",
	"updated" => "2022-01-10"
);
head($obj);
?>
<h2>vbaプログラム</h2>
では実際にマクロを書いてみましょう♪<br />マクロはvbe画面のプロジェクトエクスプローラーのモジュールから書きます。<br />まずはモジュールを追加しましょう♪<br />「挿入 &gt; 標準モジュール」からモジュールを追加します。
<img src="../pics/プロジェクトエクスプローラー.gif" alt="標準モジュール" />
モジュールには以下の3つがあります。
<ul>
	<li>フォームモジュール</li>
	<li>標準モジュール</li>
	<li>クラスモジュール</li>
</ul>
<h3>フォームモジュール</h3>
ユーザフォームの動作を書きます。<br />フォーム画面とはユーザに何かを入力されるためのパーツで、ユーザにexcel上に直接データを入力せずにフォームに入力させることで誤入力のチェックを防ぐことができます。
<h3>標準モジュール</h3>
もっとも一般的なモジュールです。<br />ここに一般的な処理を書いていきます。
<h3>クラスモジュール</h3>
オブジェクトを作るためのクラスを書きます。<br />少し高度な機能で、主にプログラムの保守性のために使用されます。
<div class="separator"></div>
不要なモジュールはモジュールを右クリックして「モジュールの解放」から削除します。<br />モジュールを保存するか確認されますが、削除するだけなら「いいえ」を選択してください。
<img class="no-max" src="../pics/モジュールの削除.gif" alt="モジュールの削除" />
<h2>マクロの書き方</h2>
では実際に先ほど作成した標準モジュールにマクロを書きましょう♪<br />マクロは以下のように記述します。
<code class="vba">
	Sub マクロの名前()
		マクロの中身
	End Sub
</code>
ちなみに「Sub」はsubプロシージャという意味で、ある一定の処理の集まり(マクロ/プロシージャ/関数)を表します。<br />大文字と小文字は区別しません。<br />同じマクロ名を設定することはできません。
<h2>マクロの保存</h2>
マクロファイルは「Ctrl」+「S」ないしは上書き保存ボタンから保存します。
<img src="../pics/保存.png" alt="マクロファイルの保存" />
<h2>マクロの実行</h2>
マクロファイルは通常目的の実行方法とデバグ目的の実行方法の2つがあります。
<h3>通常目的の実行</h3>
通常のexcelの開発タブのマクロから実行します。<br />マクロをクリックすると登録されているマクロ一覧が表示されます。<br />名前には「Sub マクロ名」で指定したマクロ名が表示されます。<br />試しに以下のマクロを実行してみましょう♪
<p class="r">内容は無視してok!です。</p>
<code class="vba">
	Sub hello()
		Range("A1").Value = "Hello World!"
	End Sub
</code>
「hello」という名前のマクロを作成しました。<br />これはA1セルの中身を「Hello World」に設定します。<br />これを実行してみましょう♪
<img src="../pics/hello-world.gif" alt="マクロの実行" />
<h3>デバグ目的の実行</h3>
vbeでプログラミングして、それを確認するためにexcelに戻って実行して、、、<br />って大変ですよね、、、<br />ということでvbeの画面から実行する方法を紹介します。<br />vbe画面の実行メニューから「Sub/ユーザーフォームの実行」をクリックします。<br />結果を確認するにはexcelに戻らないといけないので、実際にexcelを操作する場合ではなく、後述する変数の中身をイミディエイトウィンドウに表示する場合などに使用します。
<h2>コメントアウト</h2>
これからはプログラムコードを実際に書いていきます。<br />保守性(プログラムの修正のしやすさ)の観点からプログラムコード中にメモ書きを書くことがあります。<br />これをコメントアウトと呼びますが、これは「'(シングルクォーテーション)」の後の部分が自動的にコメントアウトとして解釈されます。
<code class="vba">
	  'ここはコメントアウトです。
	  '実際に実行されない部分です。
	  'メモ書きとして使用します。
</code>
<h2>オブジェクト</h2>
vbaは強いオブジェクト指向プログラミング言語ですのでvbaを使いこなすにはオブジェクト指向の理解が必要です。<br />ですけど自分でクラスを作ってコンストラクタ、、、云々かんぬん、、インスタンス、、、云々かんぬん、、、継承、、、云々かんぬん、、、ポリモーフィズム、、、云々かんぬん、、、<br />といった知識は不要です。<br /><br />あくまで、excelのセルや列や行やグラフや図やさらには表全体がオブジェクトであることと、オブジェクトはデータであるプロパティと処理であるメソッドを持つことを理解して下さい。
<img src="../pics/オブジェクト.png" alt="オブジェクトの説明画像" />
<h3>プロパティ</h3>
オブジェクトのデータを指します。<br />「オブジェクト.プロパティ名」でそのプロパティを取得します。<br />また、オブジェクトのプロパティを変更するには「オブジェクト.プロパティ = 変更後のデータ」で実行します。
<p class="r">「=」を見ると「同じ」を意識しますが、プログラミングの世界では右のデータを左に代入することを意味します。</p>
<h3>メソッド</h3>
オブジェクトの処理(関数)を指します。<br />「オブジェクト.メソッド名」でそのメソッドを実行します。
<h4>引数</h4>
メソッドを実行する際に何らかのデータを与えるときがあります。<br />メソッド実行時に渡すデータを引数と言いますが、引数は以下のように記述します。
<code class="vba">
	オブジェクト.メソッド 引数
</code>
引数が複数個存在する場合には「,(カンマ)」で区切って表します。
<code class="vba">
	オブジェクト.メソッド 引数1, 引数2, 引数3
</code>
引数を複数指定する場合は順番に引数を渡す必要があります。
<p class="r">「引数名:=引数のデータ」で引数名で指定する方法もありますが、特に理由がない限りは原則として順番に書くようにすべきです。</p>
<h2>セルの取得</h2>
セルはexcel-vbaで最も良く用いるオブジェクトです。<br />セルを取得する方法には以下の2つの方法があります。
<ul>
	<li>セル番地で取得</li>
	<li>行番号・列番号で取得</li>
</ul>
<h3>セル番地で取得</h3>
「A1」「C10」「AA5」「F5」という風に我々が普段用いるセル識別子でセルオブジェクトを取得します。<br />これには「Range」プロパティを使用します。<br />セル番地は「"(ダブルクォーテーション)」で囲んでください。
<code class="vba">
	Range("セル番地")
</code>
範囲を選択する際は「:(コロン)」を使用し、複数指定する場合には「,(カンマ)」で区切ります。
<code class="vba">
	Range("A1:D5, F2:G7") '「A1～D5」「F2～G7」セルを取得
</code>
普段用いる方法と同じである為使いやすい反面、列番号はアルファベットで管理するため数値を足したり引いたりしてセルを指定することが困難であるという問題もあります。
<div class="separator"></div>
「,(カンマ)」で区切って2つのセルを指定することで、その2つのセルの間のセル全てを選択することもできます。<br />Range(セル1, セル2)でセル1とセル2間のセル全てを選択できます。<br />良く用いる方法なので覚えてください。
<h3>行番号・列番号で取得</h3>
「Cells(行番号, 列番号)」でセルを取得します。
<img src="../pics/cells.png" alt="セルの取得" />
行番号も列番号もともに数字で表すため、計算結果からセルを指定することが容易にできます。<br />また、列番号が大きくなっても管理が容易です。
<div class="separator"></div>
「Offset」プロパティを使用して上下左右のセルの取得をすることもできます。<br />「オブジェクトを.Offset(縦方向, 横方向)」で指定します。
<code class="vba">
	Range("C3").Offset(1, 0) '「C4」
	Range("C3").Offset(-1, 0) '「C2」
	Range("C3").Offset(1, 1) '「D4」
	Range("C3").Offset(-1, -1) '「B2」
</code>
<h2>プロパティ</h2>
セルを取得できましたね♪<br />次はセルを操作してみましょう♪<br />「取得したセル.プロパティ = "設定したいプロパティ"」で取得したセルのプロパティを設定・変更できます。<br />プロパティには以下のものがあります。
<ul>
	<li>Value</li>
	<li>Font</li>
	<li>Interior</li>
</ul>
<h3>Value</h3>
セルの値を表します。<br />マクロのテストプログラムではvalueに「hello world」を設定しましたね♪<br />こんな感じで使用します。
<code class="vba">
	Sub change_value()
		Range("A1").Value = "Hello World!" 'A1セルの値を「Hello world」に設定
	End Sub
</code>
<img src="../pics/value.gif" alt="valueプロパティ" />
<h3>Font</h3>
Fontオブジェクトはさらに下に以下のプロパティを持ちます。
<table>
	<tbody>
		<tr>
			<th>Name</th>
			<td>フォントファミリー(フォントの種類)を設定します。<br />有名なものだと「游明朝」「游ゴシック」などがあります。<br />僕は「consolas」が好きです。</td>
		</tr>
		<tr>
			<th>Size</th>
			<td>フォントサイズを指定します。<br />「10」「12」「15」などの数値を指定します。</td>
		</tr>
		<tr>
			<th>Bold</th>
			<td>フォントを濃く表示するかを指定します。<br />濃くする場合には「True」を設定します。</td>
		</tr>
		<tr>
			<th>Underline</th>
			<td>下線を引くかを設定します。<br />引く場合には「True」を設定します。</td>
		</tr>
	</tbody>
</table>
「オブジェクト.Font.Name = "consolas"」「オブジェクト.Font.Size = "12"」のように設定します。
<code class="vba">
	Sub change_font()
		Range("A1").Font.Name = "consolas" 'A1セルのフォントファミリーを「consolas」に設定
		Range("A1").Font.Size = "20" 'A1セルのフォントサイズを「20」に設定
		Range("A1").Font.Bold = True 'A1セルのフォント幅を「濃い」に設定
		Range("A1").Font.Underline = True 'A1セルのフォント下線を「通常の下線」に設定
	End Sub
</code>
<img src="../pics/font.gif" alt="fontプロパティ" />
<h3>Interior</h3>
背景を設定します。<br />さらに下のオブジェクトである「Color」プロパティを設定します。
<p class="r">色の指定はRGB指定です。<br />僕が作ったRGB作成ツールは<a href="../../../program/イロイロ/branch">こちら</a>。</p>
<code class="vba">
	Sub change_font()
		Range("A1").interior.Color = RGB(255, 0, 0)
	End Sub
</code>
<img src="../pics/interior.gif" alt="interiorプロパティ" />
<h2>With</h2>
同一のオブジェクトに対して複数の処理をする際にそのオブジェクトをいちいち書くと大変ですよね、、、<br />例えば、A1セルの値を「こんにちは」に設定して、文字サイズを「16」に文字の幅を太くする際にwithを用いないと以下のコードを書く必要があります。
<code class="vba">
	Sub change()
		Range("A1").Value = "こんにちは"
		Range("A1").Font.Size = "16"
		Range("A1").Font.Bold = True
	End Sub
</code>
<img src="../pics/with.gif" alt="withプロパティ" />
これをwithを用いて簡単に書いてみましょう♪<br />withは以下のように記述します。
<code class="vba">
	With 対象のオブジェクト
		処理1
		処理2
		処理3
	End With
</code>
先ほどの例をwithを用いて書くと以下のコードになります。
<code class="vba">
	Sub change()
		With Range("A1")
			.Value = "こんにちは"
			.Font.Size = "16"
			.Font.Bold = true
		End With
	End Sub
</code>
先ほどと同じ処理を実行します。
<img src="../pics/with.gif" alt="withプロパティ" />
<?php footer(); ?>